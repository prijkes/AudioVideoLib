From: "Saved by Windows Internet Explorer 8"
Subject: id3v2-00 - ID3.org
Date: Fri, 13 May 2011 21:14:05 +0200
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----=_NextPart_000_001B_01CC11B2.B09A60E0"
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17574

This is a multi-part message in MIME format.

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/id3v2-00

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD><TITLE>id3v2-00 - ID3.org</TITLE>
<META content=3Dtext/html;charset=3Dutf-8 http-equiv=3DContent-Type>
<META name=3Drobots content=3Dindex,nofollow>
<SCRIPT type=3Dtext/javascript=20
src=3D"http://www.id3.org/wiki/common/js/common.js"></SCRIPT>

<SCRIPT type=3Dtext/javascript>=0A=
<!--// common functions=0A=
=0A=
// We keep here the state of the search box=0A=
searchIsDisabled =3D false;=0A=
=0A=
function searchChange(e) {=0A=
    // Update search buttons status according to search box content.=0A=
    // Ignore empty or whitespace search term.=0A=
    var value =3D e.value.replace(/\s+/, '');=0A=
    if (value =3D=3D '' || searchIsDisabled) { =0A=
        searchSetDisabled(true);=0A=
    } else {=0A=
        searchSetDisabled(false);=0A=
    }=0A=
}=0A=
=0A=
function searchSetDisabled(flag) {=0A=
    // Enable or disable search=0A=
    document.getElementById('fullsearch').disabled =3D flag;=0A=
    document.getElementById('titlesearch').disabled =3D flag;=0A=
}=0A=
=0A=
function searchFocus(e) {=0A=
    // Update search input content on focus=0A=
    if (e.value =3D=3D '=E6=A4=9C=E7=B4=A2') {=0A=
        e.value =3D '';=0A=
        e.className =3D '';=0A=
        searchIsDisabled =3D false;=0A=
    }=0A=
}=0A=
=0A=
function searchBlur(e) {=0A=
    // Update search input content on blur=0A=
    if (e.value =3D=3D '') {=0A=
        e.value =3D '=E6=A4=9C=E7=B4=A2';=0A=
        e.className =3D 'disabled';=0A=
        searchIsDisabled =3D true;=0A=
    }=0A=
}=0A=
=0A=
function actionsMenuInit(title) {=0A=
    // Initialize action menu=0A=
    for (i =3D 0; i < document.forms.length; i++) {=0A=
        var form =3D document.forms[i];=0A=
        if (form.className =3D=3D 'actionsmenu') {=0A=
            // Check if this form needs update=0A=
            var div =3D form.getElementsByTagName('div')[0];=0A=
            var label =3D div.getElementsByTagName('label')[0];=0A=
            if (label) {=0A=
                // This is the first time: remove label and do buton.=0A=
                div.removeChild(label);=0A=
                var dobutton =3D div.getElementsByTagName('input')[0];=0A=
                div.removeChild(dobutton);=0A=
                // and add menu title=0A=
                var select =3D div.getElementsByTagName('select')[0];=0A=
                var item =3D document.createElement('option');=0A=
                item.appendChild(document.createTextNode(title));=0A=
                item.value =3D 'show';=0A=
                select.insertBefore(item, select.options[0]);=0A=
                select.selectedIndex =3D 0;=0A=
            }=0A=
        }=0A=
    }=0A=
}=0A=
//-->=0A=
</SCRIPT>
<LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.id3.org/wiki/mentalwealth_id3/css/common.css" =
charset=3Dutf-8=20
media=3Dall><LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.id3.org/wiki/mentalwealth_id3/css/screen.css" =
charset=3Dutf-8=20
media=3Dscreen><LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.id3.org/wiki/mentalwealth_id3/css/print.css" =
charset=3Dutf-8=20
media=3Dprint><LINK rel=3Dstylesheet type=3Dtext/css=20
href=3D"http://www.id3.org/wiki/mentalwealth_id3/css/projection.css" =
charset=3Dutf-8=20
media=3Dprojection><LINK title=3D"ID3.org Recent Changes" =
rel=3Dalternate=20
type=3Dapplication/rss+xml=20
href=3D"/RecentChanges?action=3Drss_rc&amp;ddiffs=3D1&amp;unique=3D1"><LI=
NK rel=3DStart=20
href=3D"/Home"><LINK =
title=3DWiki=E3=83=9E=E3=83=BC=E3=82=AF=E3=82=A2=E3=83=83=E3=83=97 =
rel=3DAlternate=20
href=3D"/id3v2-00?action=3Draw"><LINK =
title=3D=E5=8D=B0=E5=88=B7=E3=83=93=E3=83=A5=E3=83=BC rel=3DAlternate=20
href=3D"/id3v2-00?action=3Dprint" media=3Dprint><LINK rel=3DSearch=20
href=3D"/FindPage"><LINK rel=3DIndex href=3D"/TitleIndex"><LINK =
rel=3DGlossary=20
href=3D"/WordIndex"><LINK rel=3DHelp href=3D"/HelpOnFormatting">
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.17573"></HEAD>
<BODY dir=3Dltr lang=3Dja>
<CENTER>
<SCRIPT type=3Dtext/javascript><!--=0A=
google_ad_client =3D "pub-1408728402565238";=0A=
google_ad_width =3D 728;=0A=
google_ad_height =3D 90;=0A=
google_ad_format =3D "728x90_as";=0A=
google_ad_type =3D "text";=0A=
google_ad_channel =3D "";=0A=
google_color_border =3D "ffffff";=0A=
google_color_bg =3D "FFFFFF";=0A=
google_color_link =3D "DD6600";=0A=
google_color_text =3D "000000";=0A=
google_color_url =3D "DD6600";=0A=
//--></SCRIPT>

<SCRIPT type=3Dtext/javascript=20
src=3D"http://pagead2.googlesyndication.com/pagead/show_ads.js">=0A=
  </SCRIPT>
</CENTER>
<DIV id=3Dheader>
<DIV id=3Dlogo><A href=3D"http://www.id3.org/Home"><IMG alt=3D"ID3.org =
Logo"=20
src=3D"http://www.id3.org/id3v2.gif">&nbsp;&nbsp;The Audience is=20
informed</A></DIV></DIV>
<DIV id=3Dsidebar>
<DIV class=3Dsidepanel>
<H1>=E6=A4=9C=E7=B4=A2</H1>
<FORM id=3Dsearchform method=3Dget action=3D"">
<DIV><INPUT value=3Dfullsearch type=3Dhidden name=3Daction> <INPUT =
value=3D180=20
type=3Dhidden name=3Dcontext> <LABEL =
for=3Dsearchinput>=E6=A4=9C=E7=B4=A2:</LABEL> <INPUT=20
onblur=3DsearchBlur(this) id=3Dsearchinput onfocus=3DsearchFocus(this)=20
onkeyup=3DsearchChange(this) onchange=3DsearchChange(this) alt=3DSearch =
size=3D20=20
type=3Dtext name=3Dvalue> <BR><INPUT id=3Dtitlesearch =
value=3D=E3=82=BF=E3=82=A4=E3=83=88=E3=83=AB alt=3D"Search Titles" =
type=3Dsubmit name=3Dtitlesearch>=20
<INPUT id=3Dfullsearch value=3D=E3=83=86=E3=82=AD=E3=82=B9=E3=83=88 =
alt=3D"Search Full Text" type=3Dsubmit name=3Dfullsearch>=20
</DIV></FORM>
<SCRIPT type=3Dtext/javascript>=0A=
<!--// Initialize search form=0A=
var f =3D document.getElementById('searchform');=0A=
f.getElementsByTagName('label')[0].style.display =3D 'none';=0A=
var e =3D document.getElementById('searchinput');=0A=
searchChange(e);=0A=
searchBlur(e);=0A=
//-->=0A=
</SCRIPT>
</DIV>
<DIV class=3Dsidepanel>
<H1>Navigation</H1>
<UL id=3Dnavibar>
  <LI class=3Dwikilink><A href=3D"http://www.id3.org/Home">Home</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/Introduction">Introduction</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/Developer_Information">Developer =
Information</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/Implementations">Implementations</A></LI>
  <LI class=3Dwikilink><A =
href=3D"http://www.id3.org/Compliance_Issues">Compliance=20
  Issues</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/Contributors">Contributors</A></LI>
  <LI class=3Dwikilink><A href=3D"http://www.id3.org/FAQ">FAQ</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/MailingList">MailingList</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/RecentChanges">RecentChanges</A></LI>
  <LI class=3Dwikilink><A =
href=3D"http://www.id3.org/FindPage">FindPage</A></LI>
  <LI class=3Dwikilink><A=20
  href=3D"http://www.id3.org/HelpContents">HelpContents</A></LI>
  <LI class=3Dcurrent><A=20
href=3D"http://www.id3.org/id3v2-00">id3v2-00</A></LI></UL></DIV>
<DIV class=3Dsidepanel>
<H1>Recent</H1></DIV>
<DIV class=3Dsidepanel>
<H1>This Page</H1>
<UL class=3Deditbar>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3Ddiff">show =
changes</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3Dinfo">get =
info</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3Draw">show raw =
text</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3Dprint">show print=20
view</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3Drefresh">delete =
cache</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3DAttachFile">attach =

  file</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3DSpellCheck">check=20
  spelling</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3DLikePages">show =
like=20
  pages</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3DLocalSiteMap">show =
local site=20
  map</A></LI></UL></DIV>
<DIV class=3Dsidepanel>
<H1>More Actions</H1>
<UL class=3Deditbar>
  <LI><A =
href=3D"http://www.id3.org/id3v2-00?action=3DDespam">despam</A></LI>
  <LI><A =
href=3D"http://www.id3.org/id3v2-00?action=3DSubscribeUser">subscribe=20
  user</A></LI>
  <LI><A =
href=3D"http://www.id3.org/id3v2-00?action=3DRenderAsDocbook">render as=20
  docbook</A></LI>
  <LI><A =
href=3D"http://www.id3.org/id3v2-00?action=3DPackagePages">package=20
  pages</A></LI>
  <LI><A href=3D"http://www.id3.org/id3v2-00?action=3DMyPages">my=20
pages</A></LI></UL></DIV>
<DIV class=3Dsidepanel>
<H1>=E3=83=A6=E3=83=BC=E3=82=B6</H1>
<UL id=3Dusername>
  <LI><A id=3Dlogin=20
href=3D"http://www.id3.org/id3v2-00?action=3Dlogin">=E3=83=AD=E3=82=B0=E3=
=82=A4=E3=83=B3</A></LI></UL></DIV>
<UL id=3Dcredits>
  <LI><A href=3D"http://moinmoin.wikiwikiweb.de/">MoinMoin =
Powered</A></LI>
  <LI><A href=3D"http://www.python.org/">Python Powered</A></LI>
  <LI><A href=3D"http://validator.w3.org/check?uri=3Dreferer">Valid HTML =

  4.01</A></LI></UL></DIV>
<DIV dir=3Dltr id=3Dpage lang=3Den>
<DIV dir=3Dltr id=3Dcontent lang=3Den><SPAN id=3Dtop =
class=3Danchor></SPAN><SPAN id=3Dline-2=20
class=3Danchor></SPAN>
<P class=3Dline867><SPAN id=3Dline-3 class=3Danchor></SPAN><PRE>Informal =
standard                                             M. Nilsson
<SPAN id=3Dline-4 class=3Danchor></SPAN>Document: id3v2-00.txt           =
                        26th March 1998
<SPAN id=3Dline-5 class=3Danchor></SPAN>
<SPAN id=3Dline-6 class=3Danchor></SPAN>
<SPAN id=3Dline-7 class=3Danchor></SPAN>                            ID3 =
tag version 2
<SPAN id=3Dline-8 class=3Danchor></SPAN>
<SPAN id=3Dline-9 class=3Danchor></SPAN>Status of this document
<SPAN id=3Dline-10 class=3Danchor></SPAN>
<SPAN id=3Dline-11 class=3Danchor></SPAN>   This document is an Informal =
standard and is released so that
<SPAN id=3Dline-12 class=3Danchor></SPAN>   implementors could have a =
set standard before the formal standard is
<SPAN id=3Dline-13 class=3Danchor></SPAN>   set. The formal standard =
will use another version number if not
<SPAN id=3Dline-14 class=3Danchor></SPAN>   identical to what is =
described in this document. The contents in this
<SPAN id=3Dline-15 class=3Danchor></SPAN>   document may change for =
clarifications but never for added or altered
<SPAN id=3Dline-16 class=3Danchor></SPAN>   functionallity.
<SPAN id=3Dline-17 class=3Danchor></SPAN>
<SPAN id=3Dline-18 class=3Danchor></SPAN>   Distribution of this =
document is unlimited.
<SPAN id=3Dline-19 class=3Danchor></SPAN>
<SPAN id=3Dline-20 class=3Danchor></SPAN>
<SPAN id=3Dline-21 class=3Danchor></SPAN>Abstract
<SPAN id=3Dline-22 class=3Danchor></SPAN>
<SPAN id=3Dline-23 class=3Danchor></SPAN>   The recent gain of =
popularity for MPEG layer III audio files on the
<SPAN id=3Dline-24 class=3Danchor></SPAN>   internet forced a =
standardised way of storing information about an
<SPAN id=3Dline-25 class=3Danchor></SPAN>   audio file within itself to =
determinate its origin and contents.
<SPAN id=3Dline-26 class=3Danchor></SPAN>
<SPAN id=3Dline-27 class=3Danchor></SPAN>   Today the most accepted way =
to do this is with the so called ID3 tag,
<SPAN id=3Dline-28 class=3Danchor></SPAN>   which is simple but very =
limited and in some cases very unsuitable.
<SPAN id=3Dline-29 class=3Danchor></SPAN>   The ID3 tag has very limited =
space in every field, very limited
<SPAN id=3Dline-30 class=3Danchor></SPAN>   numbers of fields, not =
expandable or upgradeable and is placed at the
<SPAN id=3Dline-31 class=3Danchor></SPAN>   end of a the file, which is =
unsuitable for streaming audio. This draft
<SPAN id=3Dline-32 class=3Danchor></SPAN>   is an attempt to answer =
these issues with a new version of the ID3
<SPAN id=3Dline-33 class=3Danchor></SPAN>   tag.
<SPAN id=3Dline-34 class=3Danchor></SPAN>
<SPAN id=3Dline-35 class=3Danchor></SPAN>
<SPAN id=3Dline-36 class=3Danchor></SPAN>1.   Table of contents
<SPAN id=3Dline-37 class=3Danchor></SPAN>
<SPAN id=3Dline-38 class=3Danchor></SPAN>   2.   Conventions in this =
document
<SPAN id=3Dline-39 class=3Danchor></SPAN>   3.   ID3v2 overview
<SPAN id=3Dline-40 class=3Danchor></SPAN>     3.1.   ID3v2 header
<SPAN id=3Dline-41 class=3Danchor></SPAN>     3.2.   ID3v2 frames =
overview
<SPAN id=3Dline-42 class=3Danchor></SPAN>   4.   Declared ID3v2 frames
<SPAN id=3Dline-43 class=3Danchor></SPAN>     4.1.   Unique file =
identifier
<SPAN id=3Dline-44 class=3Danchor></SPAN>     4.2.   Text information =
frames
<SPAN id=3Dline-45 class=3Danchor></SPAN>       4.2.1.   Text =
information frames - details
<SPAN id=3Dline-46 class=3Danchor></SPAN>       4.2.2.   User defined =
text information frame
<SPAN id=3Dline-47 class=3Danchor></SPAN>     4.3.   URL link frames
<SPAN id=3Dline-48 class=3Danchor></SPAN>       4.3.1.   URL link frames =
- details
<SPAN id=3Dline-49 class=3Danchor></SPAN>       4.3.2.   User defined =
URL link frame
<SPAN id=3Dline-50 class=3Danchor></SPAN>     4.4.   Involved people =
list
<SPAN id=3Dline-51 class=3Danchor></SPAN>     4.5.   Music CD Identifier
<SPAN id=3Dline-52 class=3Danchor></SPAN>     4.6.   Event timing codes
<SPAN id=3Dline-53 class=3Danchor></SPAN>     4.7.   MPEG location =
lookup table
<SPAN id=3Dline-54 class=3Danchor></SPAN>     4.8.   Synced tempo codes
<SPAN id=3Dline-55 class=3Danchor></SPAN>     4.9.   Unsychronised =
lyrics/text transcription
<SPAN id=3Dline-56 class=3Danchor></SPAN>     4.10.  Synchronised =
lyrics/text
<SPAN id=3Dline-57 class=3Danchor></SPAN>     4.11.  Comments
<SPAN id=3Dline-58 class=3Danchor></SPAN>     4.12.  Relative volume =
adjustment
<SPAN id=3Dline-59 class=3Danchor></SPAN>     4.13.  Equalisation
<SPAN id=3Dline-60 class=3Danchor></SPAN>     4.14.  Reverb
<SPAN id=3Dline-61 class=3Danchor></SPAN>     4.15.  Attached picture
<SPAN id=3Dline-62 class=3Danchor></SPAN>     4.16.  General =
encapsulated object
<SPAN id=3Dline-63 class=3Danchor></SPAN>     4.17.  Play counter
<SPAN id=3Dline-64 class=3Danchor></SPAN>     4.18.  Popularimeter
<SPAN id=3Dline-65 class=3Danchor></SPAN>     4.19.  Recommended buffer =
size
<SPAN id=3Dline-66 class=3Danchor></SPAN>     4.20.  Encrypted meta =
frame
<SPAN id=3Dline-67 class=3Danchor></SPAN>     4.21.  Audio encryption
<SPAN id=3Dline-68 class=3Danchor></SPAN>     4.22.  Linked information
<SPAN id=3Dline-69 class=3Danchor></SPAN>   5.   The 'unsynchronisation =
scheme'
<SPAN id=3Dline-70 class=3Danchor></SPAN>   6.   Copyright
<SPAN id=3Dline-71 class=3Danchor></SPAN>   7.   References
<SPAN id=3Dline-72 class=3Danchor></SPAN>   8.   Appendix
<SPAN id=3Dline-73 class=3Danchor></SPAN>     A.   Appendix A - ID3-Tag =
Specification V1.1
<SPAN id=3Dline-74 class=3Danchor></SPAN>       A.1.   Overview
<SPAN id=3Dline-75 class=3Danchor></SPAN>       A.2.   ID3v1 =
Implementation
<SPAN id=3Dline-76 class=3Danchor></SPAN>       A.3.   Genre List
<SPAN id=3Dline-77 class=3Danchor></SPAN>       A.4.   Track addition - =
ID3v1.1
<SPAN id=3Dline-78 class=3Danchor></SPAN>   9.   Author's Address
<SPAN id=3Dline-79 class=3Danchor></SPAN>
<SPAN id=3Dline-80 class=3Danchor></SPAN>
<SPAN id=3Dline-81 class=3Danchor></SPAN>2.   Conventions in this =
document
<SPAN id=3Dline-82 class=3Danchor></SPAN>
<SPAN id=3Dline-83 class=3Danchor></SPAN>   In the examples, text within =
"" is a text string exactly as it appears
<SPAN id=3Dline-84 class=3Danchor></SPAN>   in a file. Numbers preceded =
with $ are hexadecimal and numbers
<SPAN id=3Dline-85 class=3Danchor></SPAN>   preceded with % are binary. =
$xx is used to indicate a byte with
<SPAN id=3Dline-86 class=3Danchor></SPAN>   unknown content. %x is used =
to indicate a bit with unknown content.
<SPAN id=3Dline-87 class=3Danchor></SPAN>   The most significant bit =
(MSB) of a byte is called 'bit 7' and the
<SPAN id=3Dline-88 class=3Danchor></SPAN>   least significant bit (LSB) =
is called 'bit 0'.
<SPAN id=3Dline-89 class=3Danchor></SPAN>
<SPAN id=3Dline-90 class=3Danchor></SPAN>   A tag is the whole tag =
described in this document. A frame is a block
<SPAN id=3Dline-91 class=3Danchor></SPAN>   of information in the tag. =
The tag consists of a header, frames and
<SPAN id=3Dline-92 class=3Danchor></SPAN>   optional padding. A field is =
a piece of information; one value, a
<SPAN id=3Dline-93 class=3Danchor></SPAN>   string etc. A numeric string =
is a string that consists of the
<SPAN id=3Dline-94 class=3Danchor></SPAN>   characters 0-9 only.
<SPAN id=3Dline-95 class=3Danchor></SPAN>
<SPAN id=3Dline-96 class=3Danchor></SPAN>
<SPAN id=3Dline-97 class=3Danchor></SPAN>3.   ID3v2 overview
<SPAN id=3Dline-98 class=3Danchor></SPAN>
<SPAN id=3Dline-99 class=3Danchor></SPAN>   The two biggest design goals =
were to be able to implement ID3v2
<SPAN id=3Dline-100 class=3Danchor></SPAN>   without disturbing old =
software too much and that ID3v2 should be
<SPAN id=3Dline-101 class=3Danchor></SPAN>   expandable.
<SPAN id=3Dline-102 class=3Danchor></SPAN>
<SPAN id=3Dline-103 class=3Danchor></SPAN>   The first criterion is met =
by the simple fact that the MPEG [MPEG]
<SPAN id=3Dline-104 class=3Danchor></SPAN>   decoding software uses a =
syncsignal, embedded in the audiostream, to
<SPAN id=3Dline-105 class=3Danchor></SPAN>   'lock on to' the audio. =
Since the ID3v2 tag doesn't contain a valid
<SPAN id=3Dline-106 class=3Danchor></SPAN>   syncsignal, no software =
will attempt to play the tag. If, for any
<SPAN id=3Dline-107 class=3Danchor></SPAN>   reason, coincidence make a =
syncsignal appear within the tag it will be
<SPAN id=3Dline-108 class=3Danchor></SPAN>   taken care of by the =
'unsynchronisation scheme' described in section
<SPAN id=3Dline-109 class=3Danchor></SPAN>   5.
<SPAN id=3Dline-110 class=3Danchor></SPAN>
<SPAN id=3Dline-111 class=3Danchor></SPAN>   The second criterion has =
made a more noticeable impact on the design
<SPAN id=3Dline-112 class=3Danchor></SPAN>   of the ID3v2 tag. It is =
constructed as a container for several
<SPAN id=3Dline-113 class=3Danchor></SPAN>   information blocks, called =
frames, whose format need not be known to
<SPAN id=3Dline-114 class=3Danchor></SPAN>   the software that =
encounters them. At the start of every frame there
<SPAN id=3Dline-115 class=3Danchor></SPAN>   is an identifier that =
explains the frames's format and content, and a
<SPAN id=3Dline-116 class=3Danchor></SPAN>   size descriptor that allows =
software to skip unknown frames.
<SPAN id=3Dline-117 class=3Danchor></SPAN>
<SPAN id=3Dline-118 class=3Danchor></SPAN>   If a total revision of the =
ID3v2 tag should be needed, there is a
<SPAN id=3Dline-119 class=3Danchor></SPAN>   version number and a size =
descriptor in the ID3v2 header.
<SPAN id=3Dline-120 class=3Danchor></SPAN>
<SPAN id=3Dline-121 class=3Danchor></SPAN>   The ID3 tag described in =
this document is mainly targeted to files
<SPAN id=3Dline-122 class=3Danchor></SPAN>   encoded with MPEG-2 layer =
I, MPEG-2 layer II, MPEG-2 layer III and
<SPAN id=3Dline-123 class=3Danchor></SPAN>   MPEG-2.5, but may work with =
other types of encoded audio.
<SPAN id=3Dline-124 class=3Danchor></SPAN>
<SPAN id=3Dline-125 class=3Danchor></SPAN>   The bitorder in ID3v2 is =
most significant bit first (MSB). The
<SPAN id=3Dline-126 class=3Danchor></SPAN>   byteorder in multibyte =
numbers is most significant byte first (e.g.
<SPAN id=3Dline-127 class=3Danchor></SPAN>   $12345678 would be encoded =
$12 34 56 78).
<SPAN id=3Dline-128 class=3Danchor></SPAN>
<SPAN id=3Dline-129 class=3Danchor></SPAN>   It is permitted to include =
padding after all the final frame (at the
<SPAN id=3Dline-130 class=3Danchor></SPAN>   end of the ID3 tag), making =
the size of all the frames together
<SPAN id=3Dline-131 class=3Danchor></SPAN>   smaller than the size given =
in the head of the tag. A possible purpose
<SPAN id=3Dline-132 class=3Danchor></SPAN>   of this padding is to allow =
for adding a few additional frames or
<SPAN id=3Dline-133 class=3Danchor></SPAN>   enlarge existing frames =
within the tag without having to rewrite the
<SPAN id=3Dline-134 class=3Danchor></SPAN>   entire file. The value of =
the padding bytes must be $00.
<SPAN id=3Dline-135 class=3Danchor></SPAN>
<SPAN id=3Dline-136 class=3Danchor></SPAN>
<SPAN id=3Dline-137 class=3Danchor></SPAN>3.1.   ID3v2 header
<SPAN id=3Dline-138 class=3Danchor></SPAN>
<SPAN id=3Dline-139 class=3Danchor></SPAN>   The ID3v2 tag header, which =
should be the first information in the
<SPAN id=3Dline-140 class=3Danchor></SPAN>   file, is 10 bytes as =
follows:
<SPAN id=3Dline-141 class=3Danchor></SPAN>
<SPAN id=3Dline-142 class=3Danchor></SPAN>     ID3/file identifier      =
"ID3"
<SPAN id=3Dline-143 class=3Danchor></SPAN>     ID3 version              =
$02 00
<SPAN id=3Dline-144 class=3Danchor></SPAN>     ID3 flags                =
%xx000000
<SPAN id=3Dline-145 class=3Danchor></SPAN>     ID3 size             4 * =
%0xxxxxxx
<SPAN id=3Dline-146 class=3Danchor></SPAN>
<SPAN id=3Dline-147 class=3Danchor></SPAN>   The first three bytes of =
the tag are always "ID3" to indicate that
<SPAN id=3Dline-148 class=3Danchor></SPAN>   this is an ID3 tag, =
directly followed by the two version bytes. The
<SPAN id=3Dline-149 class=3Danchor></SPAN>   first byte of ID3 version =
is it's major version, while the second byte
<SPAN id=3Dline-150 class=3Danchor></SPAN>   is its revision number. All =
revisions are backwards compatible while
<SPAN id=3Dline-151 class=3Danchor></SPAN>   major versions are not. If =
software with ID3v2 and below support
<SPAN id=3Dline-152 class=3Danchor></SPAN>   should encounter version =
three or higher it should simply ignore the
<SPAN id=3Dline-153 class=3Danchor></SPAN>   whole tag. Version and =
revision will never be $FF.
<SPAN id=3Dline-154 class=3Danchor></SPAN>
<SPAN id=3Dline-155 class=3Danchor></SPAN>   The first bit (bit 7) in =
the 'ID3 flags' is indicating whether or not
<SPAN id=3Dline-156 class=3Danchor></SPAN>   unsynchronisation is used =
(see section 5 for details); a set bit
<SPAN id=3Dline-157 class=3Danchor></SPAN>   indicates usage.
<SPAN id=3Dline-158 class=3Danchor></SPAN>
<SPAN id=3Dline-159 class=3Danchor></SPAN>   The second bit (bit 6) is =
indicating whether or not compression is
<SPAN id=3Dline-160 class=3Danchor></SPAN>   used; a set bit indicates =
usage. Since no compression scheme has been
<SPAN id=3Dline-161 class=3Danchor></SPAN>   decided yet, the ID3 =
decoder (for now) should just ignore the entire
<SPAN id=3Dline-162 class=3Danchor></SPAN>   tag if the compression bit =
is set.
<SPAN id=3Dline-163 class=3Danchor></SPAN>
<SPAN id=3Dline-164 class=3Danchor></SPAN>   The ID3 tag size is encoded =
with four bytes where the first bit (bit
<SPAN id=3Dline-165 class=3Danchor></SPAN>   7) is set to zero in every =
byte, making a total of 28 bits. The zeroed
<SPAN id=3Dline-166 class=3Danchor></SPAN>   bits are ignored, so a 257 =
bytes long tag is represented as $00 00 02
<SPAN id=3Dline-167 class=3Danchor></SPAN>   01.
<SPAN id=3Dline-168 class=3Danchor></SPAN>
<SPAN id=3Dline-169 class=3Danchor></SPAN>   The ID3 tag size is the =
size of the complete tag after
<SPAN id=3Dline-170 class=3Danchor></SPAN>   unsychronisation, including =
padding, excluding the header (total tag
<SPAN id=3Dline-171 class=3Danchor></SPAN>   size - 10). The reason to =
use 28 bits (representing up to 256MB) for
<SPAN id=3Dline-172 class=3Danchor></SPAN>   size description is that we =
don't want to run out of space here.
<SPAN id=3Dline-173 class=3Danchor></SPAN>
<SPAN id=3Dline-174 class=3Danchor></SPAN>   A ID3v2 tag can be detected =
with the following pattern:
<SPAN id=3Dline-175 class=3Danchor></SPAN>     $49 44 33 yy yy xx zz zz =
zz zz
<SPAN id=3Dline-176 class=3Danchor></SPAN>   Where yy is less than $FF, =
xx is the 'flags' byte and zz is less than
<SPAN id=3Dline-177 class=3Danchor></SPAN>   $80.
<SPAN id=3Dline-178 class=3Danchor></SPAN>
<SPAN id=3Dline-179 class=3Danchor></SPAN>
<SPAN id=3Dline-180 class=3Danchor></SPAN>3.2.   ID3v2 frames overview
<SPAN id=3Dline-181 class=3Danchor></SPAN>
<SPAN id=3Dline-182 class=3Danchor></SPAN>   The headers of the frames =
are similar in their construction. They
<SPAN id=3Dline-183 class=3Danchor></SPAN>   consist of one three =
character identifier (capital A-Z and 0-9) and
<SPAN id=3Dline-184 class=3Danchor></SPAN>   one three byte size field, =
making a total of six bytes. The header is
<SPAN id=3Dline-185 class=3Danchor></SPAN>   excluded from the size. =
Identifiers beginning with "X", "Y" and "Z"
<SPAN id=3Dline-186 class=3Danchor></SPAN>   are for experimental use =
and free for everyone to use. Have in mind
<SPAN id=3Dline-187 class=3Danchor></SPAN>   that someone else might =
have used the same identifier as you. All
<SPAN id=3Dline-188 class=3Danchor></SPAN>   other identifiers are =
either used or reserved for future use.
<SPAN id=3Dline-189 class=3Danchor></SPAN>
<SPAN id=3Dline-190 class=3Danchor></SPAN>   The three character frame =
identifier is followed by a three byte size
<SPAN id=3Dline-191 class=3Danchor></SPAN>   descriptor, making a total =
header size of six bytes in every frame.
<SPAN id=3Dline-192 class=3Danchor></SPAN>   The size is calculated as =
framesize excluding frame identifier and
<SPAN id=3Dline-193 class=3Danchor></SPAN>   size descriptor (frame size =
- 6).
<SPAN id=3Dline-194 class=3Danchor></SPAN>
<SPAN id=3Dline-195 class=3Danchor></SPAN>   There is no fixed order of =
the frames' appearance in the tag, although
<SPAN id=3Dline-196 class=3Danchor></SPAN>   it is desired that the =
frames are arranged in order of significance
<SPAN id=3Dline-197 class=3Danchor></SPAN>   concerning the recognition =
of the file. An example of such order:
<SPAN id=3Dline-198 class=3Danchor></SPAN>   UFI, MCI, TT2 ...
<SPAN id=3Dline-199 class=3Danchor></SPAN>
<SPAN id=3Dline-200 class=3Danchor></SPAN>   A tag must contain at least =
one frame. A frame must be at least 1 byte
<SPAN id=3Dline-201 class=3Danchor></SPAN>   big, excluding the 6-byte =
header.
<SPAN id=3Dline-202 class=3Danchor></SPAN>
<SPAN id=3Dline-203 class=3Danchor></SPAN>   If nothing else is said a =
string is represented as ISO-8859-1
<SPAN id=3Dline-204 class=3Danchor></SPAN>   [ISO-8859-1] characters in =
the range $20 - $FF. All unicode strings
<SPAN id=3Dline-205 class=3Danchor></SPAN>   [UNICODE] use 16-bit =
unicode 2.0 (ISO/IEC 10646-1:1993, UCS-2). All
<SPAN id=3Dline-206 class=3Danchor></SPAN>   numeric strings are always =
encoded as ISO-8859-1. Terminated strings
<SPAN id=3Dline-207 class=3Danchor></SPAN>   are terminated with $00 if =
encoded with ISO-8859-1 and $00 00 if
<SPAN id=3Dline-208 class=3Danchor></SPAN>   encoded as unicode. If =
nothing else is said newline character is
<SPAN id=3Dline-209 class=3Danchor></SPAN>   forbidden. In ISO-8859-1 a =
new line is represented, when allowed, with
<SPAN id=3Dline-210 class=3Danchor></SPAN>   $0A only. Frames that allow =
different types of text encoding have a
<SPAN id=3Dline-211 class=3Danchor></SPAN>   text encoding description =
byte directly after the frame size. If
<SPAN id=3Dline-212 class=3Danchor></SPAN>   ISO-8859-1 is used this =
byte should be $00, if unicode is used it
<SPAN id=3Dline-213 class=3Danchor></SPAN>   should be $01.
<SPAN id=3Dline-214 class=3Danchor></SPAN>
<SPAN id=3Dline-215 class=3Danchor></SPAN>   The three byte language =
field is used to describe the language of the
<SPAN id=3Dline-216 class=3Danchor></SPAN>   frame's content, according =
to ISO-639-2 [ISO-639-2].
<SPAN id=3Dline-217 class=3Danchor></SPAN>
<SPAN id=3Dline-218 class=3Danchor></SPAN>   All URLs [URL] may be =
relative, e.g. "picture.png", "../doc.txt".
<SPAN id=3Dline-219 class=3Danchor></SPAN>
<SPAN id=3Dline-220 class=3Danchor></SPAN>   If a frame is longer than =
it should be, e.g. having more fields than
<SPAN id=3Dline-221 class=3Danchor></SPAN>   specified in this document, =
that indicates that additions to the
<SPAN id=3Dline-222 class=3Danchor></SPAN>   frame have been made in a =
later version of the ID3 standard. This
<SPAN id=3Dline-223 class=3Danchor></SPAN>   is reflected by the =
revision number in the header of the tag.
<SPAN id=3Dline-224 class=3Danchor></SPAN>
<SPAN id=3Dline-225 class=3Danchor></SPAN>
<SPAN id=3Dline-226 class=3Danchor></SPAN>4.   Declared ID3v2 frames
<SPAN id=3Dline-227 class=3Danchor></SPAN>
<SPAN id=3Dline-228 class=3Danchor></SPAN>   The following frames are =
declared in this draft.
<SPAN id=3Dline-229 class=3Danchor></SPAN>
<SPAN id=3Dline-230 class=3Danchor></SPAN>   4.19  BUF Recommended =
buffer size
<SPAN id=3Dline-231 class=3Danchor></SPAN>
<SPAN id=3Dline-232 class=3Danchor></SPAN>   4.17  CNT Play counter
<SPAN id=3Dline-233 class=3Danchor></SPAN>   4.11  COM Comments
<SPAN id=3Dline-234 class=3Danchor></SPAN>   4.21  CRA Audio encryption
<SPAN id=3Dline-235 class=3Danchor></SPAN>   4.20  CRM Encrypted meta =
frame
<SPAN id=3Dline-236 class=3Danchor></SPAN>
<SPAN id=3Dline-237 class=3Danchor></SPAN>   4.6   ETC Event timing =
codes
<SPAN id=3Dline-238 class=3Danchor></SPAN>   4.13  EQU Equalization
<SPAN id=3Dline-239 class=3Danchor></SPAN>
<SPAN id=3Dline-240 class=3Danchor></SPAN>   4.16  GEO General =
encapsulated object
<SPAN id=3Dline-241 class=3Danchor></SPAN>
<SPAN id=3Dline-242 class=3Danchor></SPAN>   4.4   IPL Involved people =
list
<SPAN id=3Dline-243 class=3Danchor></SPAN>
<SPAN id=3Dline-244 class=3Danchor></SPAN>   4.22  LNK Linked =
information
<SPAN id=3Dline-245 class=3Danchor></SPAN>
<SPAN id=3Dline-246 class=3Danchor></SPAN>   4.5   MCI Music CD =
Identifier
<SPAN id=3Dline-247 class=3Danchor></SPAN>   4.7   MLL MPEG location =
lookup table
<SPAN id=3Dline-248 class=3Danchor></SPAN>
<SPAN id=3Dline-249 class=3Danchor></SPAN>   4.15  PIC Attached picture
<SPAN id=3Dline-250 class=3Danchor></SPAN>   4.18  POP Popularimeter
<SPAN id=3Dline-251 class=3Danchor></SPAN>
<SPAN id=3Dline-252 class=3Danchor></SPAN>   4.14  REV Reverb
<SPAN id=3Dline-253 class=3Danchor></SPAN>   4.12  RVA Relative volume =
adjustment
<SPAN id=3Dline-254 class=3Danchor></SPAN>
<SPAN id=3Dline-255 class=3Danchor></SPAN>   4.10  SLT Synchronized =
lyric/text
<SPAN id=3Dline-256 class=3Danchor></SPAN>   4.8   STC Synced tempo =
codes
<SPAN id=3Dline-257 class=3Danchor></SPAN>
<SPAN id=3Dline-258 class=3Danchor></SPAN>   4.2.1 TAL Album/Movie/Show =
title
<SPAN id=3Dline-259 class=3Danchor></SPAN>   4.2.1 TBP BPM (Beats Per =
Minute)
<SPAN id=3Dline-260 class=3Danchor></SPAN>   4.2.1 TCM Composer
<SPAN id=3Dline-261 class=3Danchor></SPAN>   4.2.1 TCO Content type
<SPAN id=3Dline-262 class=3Danchor></SPAN>   4.2.1 TCR Copyright message
<SPAN id=3Dline-263 class=3Danchor></SPAN>   4.2.1 TDA Date
<SPAN id=3Dline-264 class=3Danchor></SPAN>   4.2.1 TDY Playlist delay
<SPAN id=3Dline-265 class=3Danchor></SPAN>   4.2.1 TEN Encoded by
<SPAN id=3Dline-266 class=3Danchor></SPAN>   4.2.1 TFT File type
<SPAN id=3Dline-267 class=3Danchor></SPAN>   4.2.1 TIM Time
<SPAN id=3Dline-268 class=3Danchor></SPAN>   4.2.1 TKE Initial key
<SPAN id=3Dline-269 class=3Danchor></SPAN>   4.2.1 TLA Language(s)
<SPAN id=3Dline-270 class=3Danchor></SPAN>   4.2.1 TLE Length
<SPAN id=3Dline-271 class=3Danchor></SPAN>   4.2.1 TMT Media type
<SPAN id=3Dline-272 class=3Danchor></SPAN>   4.2.1 TOA Original =
artist(s)/performer(s)
<SPAN id=3Dline-273 class=3Danchor></SPAN>   4.2.1 TOF Original filename
<SPAN id=3Dline-274 class=3Danchor></SPAN>   4.2.1 TOL Original =
Lyricist(s)/text writer(s)
<SPAN id=3Dline-275 class=3Danchor></SPAN>   4.2.1 TOR Original release =
year
<SPAN id=3Dline-276 class=3Danchor></SPAN>   4.2.1 TOT Original =
album/Movie/Show title
<SPAN id=3Dline-277 class=3Danchor></SPAN>   4.2.1 TP1 Lead =
artist(s)/Lead performer(s)/Soloist(s)/Performing group
<SPAN id=3Dline-278 class=3Danchor></SPAN>   4.2.1 TP2 =
Band/Orchestra/Accompaniment
<SPAN id=3Dline-279 class=3Danchor></SPAN>   4.2.1 TP3 =
Conductor/Performer refinement
<SPAN id=3Dline-280 class=3Danchor></SPAN>   4.2.1 TP4 Interpreted, =
remixed, or otherwise modified by
<SPAN id=3Dline-281 class=3Danchor></SPAN>   4.2.1 TPA Part of a set
<SPAN id=3Dline-282 class=3Danchor></SPAN>   4.2.1 TPB Publisher
<SPAN id=3Dline-283 class=3Danchor></SPAN>   4.2.1 TRC ISRC =
(International Standard Recording Code)
<SPAN id=3Dline-284 class=3Danchor></SPAN>   4.2.1 TRD Recording dates
<SPAN id=3Dline-285 class=3Danchor></SPAN>   4.2.1 TRK Track =
number/Position in set
<SPAN id=3Dline-286 class=3Danchor></SPAN>   4.2.1 TSI Size
<SPAN id=3Dline-287 class=3Danchor></SPAN>   4.2.1 TSS Software/hardware =
and settings used for encoding
<SPAN id=3Dline-288 class=3Danchor></SPAN>   4.2.1 TT1 Content group =
description
<SPAN id=3Dline-289 class=3Danchor></SPAN>   4.2.1 TT2 =
Title/Songname/Content description
<SPAN id=3Dline-290 class=3Danchor></SPAN>   4.2.1 TT3 =
Subtitle/Description refinement
<SPAN id=3Dline-291 class=3Danchor></SPAN>   4.2.1 TXT Lyricist/text =
writer
<SPAN id=3Dline-292 class=3Danchor></SPAN>   4.2.2 TXX User defined text =
information frame
<SPAN id=3Dline-293 class=3Danchor></SPAN>   4.2.1 TYE Year
<SPAN id=3Dline-294 class=3Danchor></SPAN>
<SPAN id=3Dline-295 class=3Danchor></SPAN>   4.1   UFI Unique file =
identifier
<SPAN id=3Dline-296 class=3Danchor></SPAN>   4.9   ULT Unsychronized =
lyric/text transcription
<SPAN id=3Dline-297 class=3Danchor></SPAN>
<SPAN id=3Dline-298 class=3Danchor></SPAN>   4.3.1 WAF Official audio =
file webpage
<SPAN id=3Dline-299 class=3Danchor></SPAN>   4.3.1 WAR Official =
artist/performer webpage
<SPAN id=3Dline-300 class=3Danchor></SPAN>   4.3.1 WAS Official audio =
source webpage
<SPAN id=3Dline-301 class=3Danchor></SPAN>   4.3.1 WCM Commercial =
information
<SPAN id=3Dline-302 class=3Danchor></SPAN>   4.3.1 WCP Copyright/Legal =
information
<SPAN id=3Dline-303 class=3Danchor></SPAN>   4.3.1 WPB Publishers =
official webpage
<SPAN id=3Dline-304 class=3Danchor></SPAN>   4.3.2 WXX User defined URL =
link frame
<SPAN id=3Dline-305 class=3Danchor></SPAN>
<SPAN id=3Dline-306 class=3Danchor></SPAN>
<SPAN id=3Dline-307 class=3Danchor></SPAN>4.1.   Unique file identifier
<SPAN id=3Dline-308 class=3Danchor></SPAN>
<SPAN id=3Dline-309 class=3Danchor></SPAN>   This frame's purpose is to =
be able to identify the audio file in a
<SPAN id=3Dline-310 class=3Danchor></SPAN>   database that may contain =
more information relevant to the content.
<SPAN id=3Dline-311 class=3Danchor></SPAN>   Since standardisation of =
such a database is beyond this document, all
<SPAN id=3Dline-312 class=3Danchor></SPAN>   frames begin with a =
null-terminated string with a URL [URL] containing
<SPAN id=3Dline-313 class=3Danchor></SPAN>   an email address, or a link =
to a location where an email address can
<SPAN id=3Dline-314 class=3Danchor></SPAN>   be found, that belongs to =
the organisation responsible for this
<SPAN id=3Dline-315 class=3Danchor></SPAN>   specific database =
implementation. Questions regarding the database
<SPAN id=3Dline-316 class=3Danchor></SPAN>   should be sent to the =
indicated email address. The URL should not be
<SPAN id=3Dline-317 class=3Danchor></SPAN>   used for the actual =
database queries. If a $00 is found directly after
<SPAN id=3Dline-318 class=3Danchor></SPAN>   the 'Frame size' the whole =
frame should be ignored, and preferably be
<SPAN id=3Dline-319 class=3Danchor></SPAN>   removed. The 'Owner =
identifier' is then followed by the actual
<SPAN id=3Dline-320 class=3Danchor></SPAN>   identifier, which may be up =
to 64 bytes. There may be more than one
<SPAN id=3Dline-321 class=3Danchor></SPAN>   "UFI" frame in a tag, but =
only one with the same 'Owner identifier'.
<SPAN id=3Dline-322 class=3Danchor></SPAN>
<SPAN id=3Dline-323 class=3Danchor></SPAN>     Unique file identifier  =
"UFI"
<SPAN id=3Dline-324 class=3Danchor></SPAN>     Frame size              =
$xx xx xx
<SPAN id=3Dline-325 class=3Danchor></SPAN>     Owner identifier        =
&lt;textstring&gt; $00
<SPAN id=3Dline-326 class=3Danchor></SPAN>     Identifier              =
&lt;up to 64 bytes binary data&gt;
<SPAN id=3Dline-327 class=3Danchor></SPAN>
<SPAN id=3Dline-328 class=3Danchor></SPAN>
<SPAN id=3Dline-329 class=3Danchor></SPAN>4.2.   Text information frames
<SPAN id=3Dline-330 class=3Danchor></SPAN>
<SPAN id=3Dline-331 class=3Danchor></SPAN>   The text information frames =
are the most important frames, containing
<SPAN id=3Dline-332 class=3Danchor></SPAN>   information like artist, =
album and more. There may only be one text
<SPAN id=3Dline-333 class=3Danchor></SPAN>   information frame of its =
kind in an tag. If the textstring is followed
<SPAN id=3Dline-334 class=3Danchor></SPAN>   by a termination ($00 (00)) =
all the following information should be
<SPAN id=3Dline-335 class=3Danchor></SPAN>   ignored and not be =
displayed. All the text information frames have the
<SPAN id=3Dline-336 class=3Danchor></SPAN>   following format:
<SPAN id=3Dline-337 class=3Danchor></SPAN>
<SPAN id=3Dline-338 class=3Danchor></SPAN>     Text information =
identifier  "T00" - "TZZ" , excluding "TXX",
<SPAN id=3Dline-339 class=3Danchor></SPAN>                               =
    described in 4.2.2.
<SPAN id=3Dline-340 class=3Danchor></SPAN>     Frame size                =
   $xx xx xx
<SPAN id=3Dline-341 class=3Danchor></SPAN>     Text encoding             =
   $xx
<SPAN id=3Dline-342 class=3Danchor></SPAN>     Information               =
   &lt;textstring&gt;
<SPAN id=3Dline-343 class=3Danchor></SPAN>
<SPAN id=3Dline-344 class=3Danchor></SPAN>
<SPAN id=3Dline-345 class=3Danchor></SPAN>4.2.1.   Text information =
frames - details
<SPAN id=3Dline-346 class=3Danchor></SPAN>
<SPAN id=3Dline-347 class=3Danchor></SPAN>  TT1
<SPAN id=3Dline-348 class=3Danchor></SPAN>   The 'Content group =
description' frame is used if the sound belongs to
<SPAN id=3Dline-349 class=3Danchor></SPAN>   a larger category of =
sounds/music. For example, classical music is
<SPAN id=3Dline-350 class=3Danchor></SPAN>   often sorted in different =
musical sections (e.g. "Piano Concerto",
<SPAN id=3Dline-351 class=3Danchor></SPAN>   "Weather - Hurricane").
<SPAN id=3Dline-352 class=3Danchor></SPAN>
<SPAN id=3Dline-353 class=3Danchor></SPAN>  TT2
<SPAN id=3Dline-354 class=3Danchor></SPAN>   The 'Title/Songname/Content =
description' frame is the actual name of
<SPAN id=3Dline-355 class=3Danchor></SPAN>   the piece (e.g. "Adagio", =
"Hurricane Donna").
<SPAN id=3Dline-356 class=3Danchor></SPAN>
<SPAN id=3Dline-357 class=3Danchor></SPAN>  TT3
<SPAN id=3Dline-358 class=3Danchor></SPAN>   The 'Subtitle/Description =
refinement' frame is used for information
<SPAN id=3Dline-359 class=3Danchor></SPAN>   directly related to the =
contents title (e.g. "Op. 16" or "Performed
<SPAN id=3Dline-360 class=3Danchor></SPAN>   live at wembley").
<SPAN id=3Dline-361 class=3Danchor></SPAN>
<SPAN id=3Dline-362 class=3Danchor></SPAN>  TP1
<SPAN id=3Dline-363 class=3Danchor></SPAN>   The 'Lead artist(s)/Lead =
performer(s)/Soloist(s)/Performing group' is
<SPAN id=3Dline-364 class=3Danchor></SPAN>   used for the main =
artist(s). They are seperated with the "/"
<SPAN id=3Dline-365 class=3Danchor></SPAN>   character.
<SPAN id=3Dline-366 class=3Danchor></SPAN>
<SPAN id=3Dline-367 class=3Danchor></SPAN>  TP2
<SPAN id=3Dline-368 class=3Danchor></SPAN>   The =
'Band/Orchestra/Accompaniment' frame is used for additional
<SPAN id=3Dline-369 class=3Danchor></SPAN>   information about the =
performers in the recording.
<SPAN id=3Dline-370 class=3Danchor></SPAN>
<SPAN id=3Dline-371 class=3Danchor></SPAN>  TP3
<SPAN id=3Dline-372 class=3Danchor></SPAN>   The 'Conductor' frame is =
used for the name of the conductor.
<SPAN id=3Dline-373 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-374 class=3Danchor></SPAN>  TP4
<SPAN id=3Dline-375 class=3Danchor></SPAN>   The 'Interpreted, remixed, =
or otherwise modified by' frame contains
<SPAN id=3Dline-376 class=3Danchor></SPAN>   more information about the =
people behind a remix and similar
<SPAN id=3Dline-377 class=3Danchor></SPAN>   interpretations of another =
existing piece.
<SPAN id=3Dline-378 class=3Danchor></SPAN>
<SPAN id=3Dline-379 class=3Danchor></SPAN>  TCM
<SPAN id=3Dline-380 class=3Danchor></SPAN>   The 'Composer(s)' frame is =
intended for the name of the composer(s).
<SPAN id=3Dline-381 class=3Danchor></SPAN>   They are seperated with the =
"/" character.
<SPAN id=3Dline-382 class=3Danchor></SPAN>
<SPAN id=3Dline-383 class=3Danchor></SPAN>  TXT
<SPAN id=3Dline-384 class=3Danchor></SPAN>   The 'Lyricist(s)/text =
writer(s)' frame is intended for the writer(s)
<SPAN id=3Dline-385 class=3Danchor></SPAN>   of the text or lyrics in =
the recording. They are seperated with the
<SPAN id=3Dline-386 class=3Danchor></SPAN>   "/" character.
<SPAN id=3Dline-387 class=3Danchor></SPAN>
<SPAN id=3Dline-388 class=3Danchor></SPAN>  TLA
<SPAN id=3Dline-389 class=3Danchor></SPAN>   The 'Language(s)' frame =
should contain the languages of the text or
<SPAN id=3Dline-390 class=3Danchor></SPAN>   lyrics in the audio file. =
The language is represented with three
<SPAN id=3Dline-391 class=3Danchor></SPAN>   characters according to =
ISO-639-2. If more than one language is used
<SPAN id=3Dline-392 class=3Danchor></SPAN>   in the text their language =
codes should follow according to their
<SPAN id=3Dline-393 class=3Danchor></SPAN>   usage.
<SPAN id=3Dline-394 class=3Danchor></SPAN>
<SPAN id=3Dline-395 class=3Danchor></SPAN>  TCO
<SPAN id=3Dline-396 class=3Danchor></SPAN>   The content type, which =
previously (in ID3v1.1, see appendix A) was
<SPAN id=3Dline-397 class=3Danchor></SPAN>   stored as a one byte =
numeric value only, is now a numeric string. You
<SPAN id=3Dline-398 class=3Danchor></SPAN>   may use one or several of =
the types as ID3v1.1 did or, since the
<SPAN id=3Dline-399 class=3Danchor></SPAN>   category list would be =
impossible to maintain with accurate and up to
<SPAN id=3Dline-400 class=3Danchor></SPAN>   date categories, define =
your own.
<SPAN id=3Dline-401 class=3Danchor></SPAN>   References to the ID3v1 =
genres can be made by, as first byte, enter
<SPAN id=3Dline-402 class=3Danchor></SPAN>   "(" followed by a number =
from the genres list (section A.3.) and
<SPAN id=3Dline-403 class=3Danchor></SPAN>   ended with a ")" character. =
This is optionally followed by a
<SPAN id=3Dline-404 class=3Danchor></SPAN>   refinement, e.g. "(21)" or =
"(4)Eurodisco". Several references can be
<SPAN id=3Dline-405 class=3Danchor></SPAN>   made in the same frame, =
e.g. "(51)(39)". If the refinement should
<SPAN id=3Dline-406 class=3Danchor></SPAN>   begin with a "(" character =
it should be replaced with "((", e.g. "((I
<SPAN id=3Dline-407 class=3Danchor></SPAN>   can figure out any genre)" =
or "(55)((I think...)". The following new
<SPAN id=3Dline-408 class=3Danchor></SPAN>   content types is defined in =
ID3v2 and is implemented in the same way
<SPAN id=3Dline-409 class=3Danchor></SPAN>   as the numerig content =
types, e.g. "(RX)".
<SPAN id=3Dline-410 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-411 class=3Danchor></SPAN>     RX  Remix
<SPAN id=3Dline-412 class=3Danchor></SPAN>     CR  Cover
<SPAN id=3Dline-413 class=3Danchor></SPAN>
<SPAN id=3Dline-414 class=3Danchor></SPAN>  TAL
<SPAN id=3Dline-415 class=3Danchor></SPAN>   The 'Album/Movie/Show =
title' frame is intended for the title of the
<SPAN id=3Dline-416 class=3Danchor></SPAN>   recording(/source of sound) =
which the audio in the file is taken from.
<SPAN id=3Dline-417 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-418 class=3Danchor></SPAN>  TPA
<SPAN id=3Dline-419 class=3Danchor></SPAN>   The 'Part of a set' frame =
is a numeric string that describes which
<SPAN id=3Dline-420 class=3Danchor></SPAN>   part of a set the audio =
came from. This frame is used if the source
<SPAN id=3Dline-421 class=3Danchor></SPAN>   described in the "TAL" =
frame is divided into several mediums, e.g. a
<SPAN id=3Dline-422 class=3Danchor></SPAN>   double CD. The value may be =
extended with a "/" character and a
<SPAN id=3Dline-423 class=3Danchor></SPAN>   numeric string containing =
the total number of parts in the set. E.g.
<SPAN id=3Dline-424 class=3Danchor></SPAN>   "1/2".
<SPAN id=3Dline-425 class=3Danchor></SPAN>
<SPAN id=3Dline-426 class=3Danchor></SPAN>  TRK
<SPAN id=3Dline-427 class=3Danchor></SPAN>   The 'Track number/Position =
in set' frame is a numeric string
<SPAN id=3Dline-428 class=3Danchor></SPAN>   containing the order number =
of the audio-file on its original
<SPAN id=3Dline-429 class=3Danchor></SPAN>   recording. This may be =
extended with a "/" character and a numeric
<SPAN id=3Dline-430 class=3Danchor></SPAN>   string containing the total =
numer of tracks/elements on the original
<SPAN id=3Dline-431 class=3Danchor></SPAN>   recording. E.g. "4/9".
<SPAN id=3Dline-432 class=3Danchor></SPAN>
<SPAN id=3Dline-433 class=3Danchor></SPAN>  TRC
<SPAN id=3Dline-434 class=3Danchor></SPAN>   The 'ISRC' frame should =
contian the International Standard Recording
<SPAN id=3Dline-435 class=3Danchor></SPAN>   Code [ISRC].
<SPAN id=3Dline-436 class=3Danchor></SPAN>
<SPAN id=3Dline-437 class=3Danchor></SPAN>  TYE
<SPAN id=3Dline-438 class=3Danchor></SPAN>   The 'Year' frame is a =
numeric string with a year of the recording.
<SPAN id=3Dline-439 class=3Danchor></SPAN>   This frames is always four =
characters long (until the year 10000).
<SPAN id=3Dline-440 class=3Danchor></SPAN>
<SPAN id=3Dline-441 class=3Danchor></SPAN>  TDA
<SPAN id=3Dline-442 class=3Danchor></SPAN>   The 'Date' frame is a =
numeric string in the DDMM format containing
<SPAN id=3Dline-443 class=3Danchor></SPAN>   the date for the recording. =
This field is always four characters
<SPAN id=3Dline-444 class=3Danchor></SPAN>   long.
<SPAN id=3Dline-445 class=3Danchor></SPAN>
<SPAN id=3Dline-446 class=3Danchor></SPAN>  TIM
<SPAN id=3Dline-447 class=3Danchor></SPAN>   The 'Time' frame is a =
numeric string in the HHMM format containing
<SPAN id=3Dline-448 class=3Danchor></SPAN>   the time for the recording. =
This field is always four characters
<SPAN id=3Dline-449 class=3Danchor></SPAN>   long.
<SPAN id=3Dline-450 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-451 class=3Danchor></SPAN>  TRD
<SPAN id=3Dline-452 class=3Danchor></SPAN>   The 'Recording dates' frame =
is a intended to be used as complement to
<SPAN id=3Dline-453 class=3Danchor></SPAN>   the "TYE", "TDA" and "TIM" =
frames. E.g. "4th-7th June, 12th June" in
<SPAN id=3Dline-454 class=3Danchor></SPAN>   combination with the "TYE" =
frame.
<SPAN id=3Dline-455 class=3Danchor></SPAN>
<SPAN id=3Dline-456 class=3Danchor></SPAN>  TMT
<SPAN id=3Dline-457 class=3Danchor></SPAN>   The 'Media type' frame =
describes from which media the sound
<SPAN id=3Dline-458 class=3Danchor></SPAN>   originated. This may be a =
textstring or a reference to the predefined
<SPAN id=3Dline-459 class=3Danchor></SPAN>   media types found in the =
list below. References are made within "("
<SPAN id=3Dline-460 class=3Danchor></SPAN>   and ")" and are optionally =
followed by a text refinement, e.g. "(MC)
<SPAN id=3Dline-461 class=3Danchor></SPAN>   with four channels". If a =
text refinement should begin with a "("
<SPAN id=3Dline-462 class=3Danchor></SPAN>   character it should be =
replaced with "((" in the same way as in the
<SPAN id=3Dline-463 class=3Danchor></SPAN>   "TCO" frame. Predefined =
refinements is appended after the media type,
<SPAN id=3Dline-464 class=3Danchor></SPAN>   e.g. "(CD/S)" or =
"(VID/PAL/VHS)".
<SPAN id=3Dline-465 class=3Danchor></SPAN>
<SPAN id=3Dline-466 class=3Danchor></SPAN>    DIG    Other digital media
<SPAN id=3Dline-467 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-468 class=3Danchor></SPAN>
<SPAN id=3Dline-469 class=3Danchor></SPAN>    ANA    Other analog media
<SPAN id=3Dline-470 class=3Danchor></SPAN>      /WAC  Wax cylinder
<SPAN id=3Dline-471 class=3Danchor></SPAN>      /8CA  8-track tape =
cassette
<SPAN id=3Dline-472 class=3Danchor></SPAN>
<SPAN id=3Dline-473 class=3Danchor></SPAN>    CD     CD
<SPAN id=3Dline-474 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-475 class=3Danchor></SPAN>      /DD   DDD
<SPAN id=3Dline-476 class=3Danchor></SPAN>      /AD   ADD
<SPAN id=3Dline-477 class=3Danchor></SPAN>      /AA   AAD
<SPAN id=3Dline-478 class=3Danchor></SPAN>
<SPAN id=3Dline-479 class=3Danchor></SPAN>    LD     Laserdisc
<SPAN id=3Dline-480 class=3Danchor></SPAN>      /A     Analog transfer =
from media
<SPAN id=3Dline-481 class=3Danchor></SPAN>
<SPAN id=3Dline-482 class=3Danchor></SPAN>    TT     Turntable records
<SPAN id=3Dline-483 class=3Danchor></SPAN>      /33    33.33 rpm
<SPAN id=3Dline-484 class=3Danchor></SPAN>      /45    45 rpm
<SPAN id=3Dline-485 class=3Danchor></SPAN>      /71    71.29 rpm
<SPAN id=3Dline-486 class=3Danchor></SPAN>      /76    76.59 rpm
<SPAN id=3Dline-487 class=3Danchor></SPAN>      /78    78.26 rpm
<SPAN id=3Dline-488 class=3Danchor></SPAN>      /80    80 rpm
<SPAN id=3Dline-489 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-490 class=3Danchor></SPAN>    MD     MiniDisc
<SPAN id=3Dline-491 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-492 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-493 class=3Danchor></SPAN>    DAT    DAT
<SPAN id=3Dline-494 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-495 class=3Danchor></SPAN>      /1    standard, 48 =
kHz/16 bits, linear
<SPAN id=3Dline-496 class=3Danchor></SPAN>      /2    mode 2, 32 kHz/16 =
bits, linear
<SPAN id=3Dline-497 class=3Danchor></SPAN>      /3    mode 3, 32 kHz/12 =
bits, nonlinear, low speed
<SPAN id=3Dline-498 class=3Danchor></SPAN>      /4    mode 4, 32 kHz/12 =
bits, 4 channels
<SPAN id=3Dline-499 class=3Danchor></SPAN>      /5    mode 5, 44.1 =
kHz/16 bits, linear
<SPAN id=3Dline-500 class=3Danchor></SPAN>      /6    mode 6, 44.1 =
kHz/16 bits, 'wide track' play
<SPAN id=3Dline-501 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-502 class=3Danchor></SPAN>    DCC    DCC
<SPAN id=3Dline-503 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-504 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-505 class=3Danchor></SPAN>    DVD    DVD
<SPAN id=3Dline-506 class=3Danchor></SPAN>      /A    Analog transfer =
from media
<SPAN id=3Dline-507 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-508 class=3Danchor></SPAN>    TV     Television
<SPAN id=3Dline-509 class=3Danchor></SPAN>      /PAL    PAL
<SPAN id=3Dline-510 class=3Danchor></SPAN>      /NTSC   NTSC
<SPAN id=3Dline-511 class=3Danchor></SPAN>      /SECAM  SECAM
<SPAN id=3Dline-512 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-513 class=3Danchor></SPAN>    VID    Video
<SPAN id=3Dline-514 class=3Danchor></SPAN>      /PAL    PAL
<SPAN id=3Dline-515 class=3Danchor></SPAN>      /NTSC   NTSC
<SPAN id=3Dline-516 class=3Danchor></SPAN>      /SECAM  SECAM
<SPAN id=3Dline-517 class=3Danchor></SPAN>      /VHS    VHS
<SPAN id=3Dline-518 class=3Danchor></SPAN>      /SVHS   S-VHS
<SPAN id=3Dline-519 class=3Danchor></SPAN>      /BETA   BETAMAX
<SPAN id=3Dline-520 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-521 class=3Danchor></SPAN>    RAD    Radio
<SPAN id=3Dline-522 class=3Danchor></SPAN>      /FM   FM
<SPAN id=3Dline-523 class=3Danchor></SPAN>      /AM   AM
<SPAN id=3Dline-524 class=3Danchor></SPAN>      /LW   LW
<SPAN id=3Dline-525 class=3Danchor></SPAN>      /MW   MW
<SPAN id=3Dline-526 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-527 class=3Danchor></SPAN>    TEL    Telephone
<SPAN id=3Dline-528 class=3Danchor></SPAN>      /I    ISDN
<SPAN id=3Dline-529 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-530 class=3Danchor></SPAN>    MC     MC (normal =
cassette)
<SPAN id=3Dline-531 class=3Danchor></SPAN>      /4    4.75 cm/s (normal =
speed for a two sided cassette)
<SPAN id=3Dline-532 class=3Danchor></SPAN>      /9    9.5 cm/s
<SPAN id=3Dline-533 class=3Danchor></SPAN>      /I    Type I cassette =
(ferric/normal)
<SPAN id=3Dline-534 class=3Danchor></SPAN>      /II   Type II cassette =
(chrome)
<SPAN id=3Dline-535 class=3Danchor></SPAN>      /III  Type III cassette =
(ferric chrome)
<SPAN id=3Dline-536 class=3Danchor></SPAN>      /IV   Type IV cassette =
(metal)
<SPAN id=3Dline-537 class=3Danchor></SPAN>   =20
<SPAN id=3Dline-538 class=3Danchor></SPAN>    REE    Reel
<SPAN id=3Dline-539 class=3Danchor></SPAN>      /9    9.5 cm/s
<SPAN id=3Dline-540 class=3Danchor></SPAN>      /19   19 cm/s
<SPAN id=3Dline-541 class=3Danchor></SPAN>      /38   38 cm/s
<SPAN id=3Dline-542 class=3Danchor></SPAN>      /76   76 cm/s
<SPAN id=3Dline-543 class=3Danchor></SPAN>      /I    Type I cassette =
(ferric/normal)
<SPAN id=3Dline-544 class=3Danchor></SPAN>      /II   Type II cassette =
(chrome)
<SPAN id=3Dline-545 class=3Danchor></SPAN>      /III  Type III cassette =
(ferric chrome)
<SPAN id=3Dline-546 class=3Danchor></SPAN>      /IV   Type IV cassette =
(metal)
<SPAN id=3Dline-547 class=3Danchor></SPAN>
<SPAN id=3Dline-548 class=3Danchor></SPAN>  TFT
<SPAN id=3Dline-549 class=3Danchor></SPAN>   The 'File type' frame =
indicates which type of audio this tag defines.
<SPAN id=3Dline-550 class=3Danchor></SPAN>   The following type and =
refinements are defined:
<SPAN id=3Dline-551 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-552 class=3Danchor></SPAN>     MPG    MPEG Audio
<SPAN id=3Dline-553 class=3Danchor></SPAN>       /1     MPEG 2 layer I
<SPAN id=3Dline-554 class=3Danchor></SPAN>       /2     MPEG 2 layer II
<SPAN id=3Dline-555 class=3Danchor></SPAN>       /3     MPEG 2 layer III
<SPAN id=3Dline-556 class=3Danchor></SPAN>       /2.5   MPEG 2.5
<SPAN id=3Dline-557 class=3Danchor></SPAN>       /AAC   Advanced audio =
compression
<SPAN id=3Dline-558 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-559 class=3Danchor></SPAN>   but other types may be =
used, not for these types though. This is used
<SPAN id=3Dline-560 class=3Danchor></SPAN>   in a similar way to the =
predefined types in the "TMT" frame, but
<SPAN id=3Dline-561 class=3Danchor></SPAN>   without parenthesis. If =
this frame is not present audio type is
<SPAN id=3Dline-562 class=3Danchor></SPAN>   assumed to be "MPG".
<SPAN id=3Dline-563 class=3Danchor></SPAN>
<SPAN id=3Dline-564 class=3Danchor></SPAN>  TBP
<SPAN id=3Dline-565 class=3Danchor></SPAN>   BPM is short for beats per =
minute, and is easily computed by
<SPAN id=3Dline-566 class=3Danchor></SPAN>   dividing the number of =
beats in a musical piece with its length. To
<SPAN id=3Dline-567 class=3Danchor></SPAN>   get a more accurate result, =
do the BPM calculation on the main-part
<SPAN id=3Dline-568 class=3Danchor></SPAN>   only. To acquire best =
result measure the time between each beat and
<SPAN id=3Dline-569 class=3Danchor></SPAN>   calculate individual BPM =
for each beat and use the median value as
<SPAN id=3Dline-570 class=3Danchor></SPAN>   result. BPM is an integer =
and represented as a numerical string.
<SPAN id=3Dline-571 class=3Danchor></SPAN>
<SPAN id=3Dline-572 class=3Danchor></SPAN>  TCR
<SPAN id=3Dline-573 class=3Danchor></SPAN>   The 'Copyright message' =
frame, which must begin with a year and a
<SPAN id=3Dline-574 class=3Danchor></SPAN>   space character (making =
five characters), is intended for the
<SPAN id=3Dline-575 class=3Danchor></SPAN>   copyright holder of the =
original sound, not the audio file itself. The
<SPAN id=3Dline-576 class=3Danchor></SPAN>   absence of this frame means =
only that the copyright information is
<SPAN id=3Dline-577 class=3Danchor></SPAN>   unavailable or has been =
removed, and must not be interpreted to mean
<SPAN id=3Dline-578 class=3Danchor></SPAN>   that the sound is public =
domain. Every time this field is displayed
<SPAN id=3Dline-579 class=3Danchor></SPAN>   the field must be preceded =
with "Copyright " (C) " ", where (C) is one
<SPAN id=3Dline-580 class=3Danchor></SPAN>   character showing a C in a =
circle.
<SPAN id=3Dline-581 class=3Danchor></SPAN>
<SPAN id=3Dline-582 class=3Danchor></SPAN>  TPB
<SPAN id=3Dline-583 class=3Danchor></SPAN>   The 'Publisher' frame =
simply contains the name of the label or
<SPAN id=3Dline-584 class=3Danchor></SPAN>   publisher.
<SPAN id=3Dline-585 class=3Danchor></SPAN>
<SPAN id=3Dline-586 class=3Danchor></SPAN>  TEN
<SPAN id=3Dline-587 class=3Danchor></SPAN>   The 'Encoded by' frame =
contains the name of the person or
<SPAN id=3Dline-588 class=3Danchor></SPAN>   organisation that encoded =
the audio file. This field may contain a
<SPAN id=3Dline-589 class=3Danchor></SPAN>   copyright message, if the =
audio file also is copyrighted by the
<SPAN id=3Dline-590 class=3Danchor></SPAN>   encoder.
<SPAN id=3Dline-591 class=3Danchor></SPAN>
<SPAN id=3Dline-592 class=3Danchor></SPAN>  TSS
<SPAN id=3Dline-593 class=3Danchor></SPAN>   The 'Software/hardware and =
settings used for encoding' frame
<SPAN id=3Dline-594 class=3Danchor></SPAN>   includes the used audio =
encoder and its settings when the file was
<SPAN id=3Dline-595 class=3Danchor></SPAN>   encoded. Hardware refers to =
hardware encoders, not the computer on
<SPAN id=3Dline-596 class=3Danchor></SPAN>   which a program was run.
<SPAN id=3Dline-597 class=3Danchor></SPAN>
<SPAN id=3Dline-598 class=3Danchor></SPAN>  TOF
<SPAN id=3Dline-599 class=3Danchor></SPAN>   The 'Original filename' =
frame contains the preferred filename for the
<SPAN id=3Dline-600 class=3Danchor></SPAN>   file, since some media =
doesn't allow the desired length of the
<SPAN id=3Dline-601 class=3Danchor></SPAN>   filename. The filename is =
case sensitive and includes its suffix.
<SPAN id=3Dline-602 class=3Danchor></SPAN>
<SPAN id=3Dline-603 class=3Danchor></SPAN>  TLE
<SPAN id=3Dline-604 class=3Danchor></SPAN>   The 'Length' frame contains =
the length of the audiofile in
<SPAN id=3Dline-605 class=3Danchor></SPAN>   milliseconds, represented =
as a numeric string.
<SPAN id=3Dline-606 class=3Danchor></SPAN>
<SPAN id=3Dline-607 class=3Danchor></SPAN>  TSI
<SPAN id=3Dline-608 class=3Danchor></SPAN>   The 'Size' frame contains =
the size of the audiofile in bytes
<SPAN id=3Dline-609 class=3Danchor></SPAN>   excluding the tag, =
represented as a numeric string.
<SPAN id=3Dline-610 class=3Danchor></SPAN>
<SPAN id=3Dline-611 class=3Danchor></SPAN>  TDY
<SPAN id=3Dline-612 class=3Danchor></SPAN>   The 'Playlist delay' =
defines the numbers of milliseconds of silence
<SPAN id=3Dline-613 class=3Danchor></SPAN>   between every song in a =
playlist. The player should use the "ETC"
<SPAN id=3Dline-614 class=3Danchor></SPAN>   frame, if present, to skip =
initial silence and silence at the end of
<SPAN id=3Dline-615 class=3Danchor></SPAN>   the audio to match the =
'Playlist delay' time. The time is represented
<SPAN id=3Dline-616 class=3Danchor></SPAN>   as a numeric string.
<SPAN id=3Dline-617 class=3Danchor></SPAN>
<SPAN id=3Dline-618 class=3Danchor></SPAN>  TKE
<SPAN id=3Dline-619 class=3Danchor></SPAN>   The 'Initial key' frame =
contains the musical key in which the sound
<SPAN id=3Dline-620 class=3Danchor></SPAN>   starts. It is represented =
as a string with a maximum length of three
<SPAN id=3Dline-621 class=3Danchor></SPAN>   characters. The ground keys =
are represented with "A","B","C","D","E",
<SPAN id=3Dline-622 class=3Danchor></SPAN>   "F" and "G" and halfkeys =
represented with "b" and "#". Minor is
<SPAN id=3Dline-623 class=3Danchor></SPAN>   represented as "m". Example =
"Cbm". Off key is represented with an "o"
<SPAN id=3Dline-624 class=3Danchor></SPAN>   only.
<SPAN id=3Dline-625 class=3Danchor></SPAN>
<SPAN id=3Dline-626 class=3Danchor></SPAN>  TOT
<SPAN id=3Dline-627 class=3Danchor></SPAN>   The 'Original =
album/Movie/Show title' frame is intended for the title
<SPAN id=3Dline-628 class=3Danchor></SPAN>   of the original =
recording(/source of sound), if for example the music
<SPAN id=3Dline-629 class=3Danchor></SPAN>   in the file should be a =
cover of a previously released song.
<SPAN id=3Dline-630 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-631 class=3Danchor></SPAN>  TOA
<SPAN id=3Dline-632 class=3Danchor></SPAN>   The 'Original =
artist(s)/performer(s)' frame is intended for the
<SPAN id=3Dline-633 class=3Danchor></SPAN>   performer(s) of the =
original recording, if for example the music in
<SPAN id=3Dline-634 class=3Danchor></SPAN>   the file should be a cover =
of a previously released song. The
<SPAN id=3Dline-635 class=3Danchor></SPAN>   performers are seperated =
with the "/" character.
<SPAN id=3Dline-636 class=3Danchor></SPAN>
<SPAN id=3Dline-637 class=3Danchor></SPAN>  TOL
<SPAN id=3Dline-638 class=3Danchor></SPAN>   The 'Original =
Lyricist(s)/text writer(s)' frame is intended for the
<SPAN id=3Dline-639 class=3Danchor></SPAN>   text writer(s) of the =
original recording, if for example the music in
<SPAN id=3Dline-640 class=3Danchor></SPAN>   the file should be a cover =
of a previously released song. The text
<SPAN id=3Dline-641 class=3Danchor></SPAN>   writers are seperated with =
the "/" character.
<SPAN id=3Dline-642 class=3Danchor></SPAN>
<SPAN id=3Dline-643 class=3Danchor></SPAN>  TOR
<SPAN id=3Dline-644 class=3Danchor></SPAN>   The 'Original release year' =
frame is intended for the year when the
<SPAN id=3Dline-645 class=3Danchor></SPAN>   original recording, if for =
example the music in the file should be a
<SPAN id=3Dline-646 class=3Danchor></SPAN>   cover of a previously =
released song, was released. The field is
<SPAN id=3Dline-647 class=3Danchor></SPAN>   formatted as in the "TDY" =
frame.
<SPAN id=3Dline-648 class=3Danchor></SPAN>
<SPAN id=3Dline-649 class=3Danchor></SPAN>
<SPAN id=3Dline-650 class=3Danchor></SPAN>4.2.2.   User defined text =
information frame
<SPAN id=3Dline-651 class=3Danchor></SPAN>
<SPAN id=3Dline-652 class=3Danchor></SPAN>   This frame is intended for =
one-string text information concerning the
<SPAN id=3Dline-653 class=3Danchor></SPAN>   audiofile in a similar way =
to the other "T"xx frames. The frame body
<SPAN id=3Dline-654 class=3Danchor></SPAN>   consists of a description =
of the string, represented as a terminated
<SPAN id=3Dline-655 class=3Danchor></SPAN>   string, followed by the =
actual string. There may be more than one
<SPAN id=3Dline-656 class=3Danchor></SPAN>   "TXX" frame in each tag, =
but only one with the same description.
<SPAN id=3Dline-657 class=3Danchor></SPAN>
<SPAN id=3Dline-658 class=3Danchor></SPAN>     User defined...   "TXX"
<SPAN id=3Dline-659 class=3Danchor></SPAN>     Frame size        $xx xx =
xx
<SPAN id=3Dline-660 class=3Danchor></SPAN>     Text encoding     $xx
<SPAN id=3Dline-661 class=3Danchor></SPAN>     Description       =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-662 class=3Danchor></SPAN>     Value             =
&lt;textstring&gt;
<SPAN id=3Dline-663 class=3Danchor></SPAN>
<SPAN id=3Dline-664 class=3Danchor></SPAN>
<SPAN id=3Dline-665 class=3Danchor></SPAN>4.3.   URL link frames
<SPAN id=3Dline-666 class=3Danchor></SPAN>
<SPAN id=3Dline-667 class=3Danchor></SPAN>   With these frames dynamic =
data such as webpages with touring
<SPAN id=3Dline-668 class=3Danchor></SPAN>   information, price =
information or plain ordinary news can be added to
<SPAN id=3Dline-669 class=3Danchor></SPAN>   the tag. There may only be =
one URL [URL] link frame of its kind in an
<SPAN id=3Dline-670 class=3Danchor></SPAN>   tag, except when stated =
otherwise in the frame description. If the
<SPAN id=3Dline-671 class=3Danchor></SPAN>   textstring is followed by a =
termination ($00 (00)) all the following
<SPAN id=3Dline-672 class=3Danchor></SPAN>   information should be =
ignored and not be displayed. All URL link
<SPAN id=3Dline-673 class=3Danchor></SPAN>   frames have the following =
format:
<SPAN id=3Dline-674 class=3Danchor></SPAN>
<SPAN id=3Dline-675 class=3Danchor></SPAN>     URL link frame   "W00" - =
"WZZ" , excluding "WXX"=20
<SPAN id=3Dline-676 class=3Danchor></SPAN>                               =
       (described in 4.3.2.)
<SPAN id=3Dline-677 class=3Danchor></SPAN>     Frame size       $xx xx =
xx
<SPAN id=3Dline-678 class=3Danchor></SPAN>     URL              =
&lt;textstring&gt;
<SPAN id=3Dline-679 class=3Danchor></SPAN>
<SPAN id=3Dline-680 class=3Danchor></SPAN>
<SPAN id=3Dline-681 class=3Danchor></SPAN>4.3.1.   URL link frames - =
details
<SPAN id=3Dline-682 class=3Danchor></SPAN>
<SPAN id=3Dline-683 class=3Danchor></SPAN>  WAF
<SPAN id=3Dline-684 class=3Danchor></SPAN>   The 'Official audio file =
webpage' frame is a URL pointing at a file
<SPAN id=3Dline-685 class=3Danchor></SPAN>   specific webpage.
<SPAN id=3Dline-686 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-687 class=3Danchor></SPAN>  WAR
<SPAN id=3Dline-688 class=3Danchor></SPAN>   The 'Official =
artist/performer webpage' frame is a URL pointing at
<SPAN id=3Dline-689 class=3Danchor></SPAN>   the artists official =
webpage. There may be more than one "WAR" frame
<SPAN id=3Dline-690 class=3Danchor></SPAN>   in a tag if the audio =
contains more than one performer.
<SPAN id=3Dline-691 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-692 class=3Danchor></SPAN>  WAS
<SPAN id=3Dline-693 class=3Danchor></SPAN>   The 'Official audio source =
webpage' frame is a URL pointing at the
<SPAN id=3Dline-694 class=3Danchor></SPAN>   official webpage for the =
source of the audio file, e.g. a movie.
<SPAN id=3Dline-695 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-696 class=3Danchor></SPAN>  WCM
<SPAN id=3Dline-697 class=3Danchor></SPAN>   The 'Commercial =
information' frame is a URL pointing at a webpage
<SPAN id=3Dline-698 class=3Danchor></SPAN>   with information such as =
where the album can be bought. There may be
<SPAN id=3Dline-699 class=3Danchor></SPAN>   more than one "WCM" frame =
in a tag.
<SPAN id=3Dline-700 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-701 class=3Danchor></SPAN>  WCP
<SPAN id=3Dline-702 class=3Danchor></SPAN>   The 'Copyright/Legal =
information' frame is a URL pointing at a
<SPAN id=3Dline-703 class=3Danchor></SPAN>   webpage where the terms of =
use and ownership of the file is described.
<SPAN id=3Dline-704 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-705 class=3Danchor></SPAN>  WPB
<SPAN id=3Dline-706 class=3Danchor></SPAN>   The 'Publishers official =
webpage' frame is a URL pointing at the
<SPAN id=3Dline-707 class=3Danchor></SPAN>   official wepage for the =
publisher.
<SPAN id=3Dline-708 class=3Danchor></SPAN>
<SPAN id=3Dline-709 class=3Danchor></SPAN>
<SPAN id=3Dline-710 class=3Danchor></SPAN>4.3.2.   User defined URL link =
frame
<SPAN id=3Dline-711 class=3Danchor></SPAN>
<SPAN id=3Dline-712 class=3Danchor></SPAN>   This frame is intended for =
URL [URL] links concerning the audiofile in
<SPAN id=3Dline-713 class=3Danchor></SPAN>   a similar way to the other =
"W"xx frames. The frame body consists of a
<SPAN id=3Dline-714 class=3Danchor></SPAN>   description of the string, =
represented as a terminated string,
<SPAN id=3Dline-715 class=3Danchor></SPAN>   followed by the actual URL. =
The URL is always encoded with ISO-8859-1
<SPAN id=3Dline-716 class=3Danchor></SPAN>   [ISO-8859-1]. There may be =
more than one "WXX" frame in each tag, but
<SPAN id=3Dline-717 class=3Danchor></SPAN>   only one with the same =
description.
<SPAN id=3Dline-718 class=3Danchor></SPAN>
<SPAN id=3Dline-719 class=3Danchor></SPAN>     User defined...   "WXX"
<SPAN id=3Dline-720 class=3Danchor></SPAN>     Frame size        $xx xx =
xx
<SPAN id=3Dline-721 class=3Danchor></SPAN>     Text encoding     $xx
<SPAN id=3Dline-722 class=3Danchor></SPAN>     Description       =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-723 class=3Danchor></SPAN>     URL               =
&lt;textstring&gt;
<SPAN id=3Dline-724 class=3Danchor></SPAN>
<SPAN id=3Dline-725 class=3Danchor></SPAN>
<SPAN id=3Dline-726 class=3Danchor></SPAN>4.4.   Involved people list
<SPAN id=3Dline-727 class=3Danchor></SPAN>
<SPAN id=3Dline-728 class=3Danchor></SPAN>   Since there might be a lot =
of people contributing to an audio file in
<SPAN id=3Dline-729 class=3Danchor></SPAN>   various ways, such as =
musicians and technicians, the 'Text
<SPAN id=3Dline-730 class=3Danchor></SPAN>   information frames' are =
often insufficient to list everyone involved
<SPAN id=3Dline-731 class=3Danchor></SPAN>   in a project. The 'Involved =
people list' is a frame containing the
<SPAN id=3Dline-732 class=3Danchor></SPAN>   names of those involved, =
and how they were involved. The body simply
<SPAN id=3Dline-733 class=3Danchor></SPAN>   contains a terminated =
string with the involvement directly followed by
<SPAN id=3Dline-734 class=3Danchor></SPAN>   a terminated string with =
the involvee followed by a new involvement
<SPAN id=3Dline-735 class=3Danchor></SPAN>   and so on. There may only =
be one "IPL" frame in each tag.
<SPAN id=3Dline-736 class=3Danchor></SPAN>
<SPAN id=3Dline-737 class=3Danchor></SPAN>     Involved people list   =
"IPL"
<SPAN id=3Dline-738 class=3Danchor></SPAN>     Frame size             =
$xx xx xx
<SPAN id=3Dline-739 class=3Danchor></SPAN>     Text encoding          =
$xx
<SPAN id=3Dline-740 class=3Danchor></SPAN>     People list strings    =
&lt;textstrings&gt;
<SPAN id=3Dline-741 class=3Danchor></SPAN>
<SPAN id=3Dline-742 class=3Danchor></SPAN>
<SPAN id=3Dline-743 class=3Danchor></SPAN>4.5.   Music CD Identifier
<SPAN id=3Dline-744 class=3Danchor></SPAN>
<SPAN id=3Dline-745 class=3Danchor></SPAN>   This frame is intended for =
music that comes from a CD, so that the CD
<SPAN id=3Dline-746 class=3Danchor></SPAN>   can be identified in =
databases such as the CDDB [CDDB]. The frame
<SPAN id=3Dline-747 class=3Danchor></SPAN>   consists of a binary dump =
of the Table Of Contents, TOC,  from the CD,
<SPAN id=3Dline-748 class=3Danchor></SPAN>   which is a header of 4 =
bytes and then 8 bytes/track on the CD making a
<SPAN id=3Dline-749 class=3Danchor></SPAN>   maximum of 804 bytes. This =
frame requires a present and valid "TRK"
<SPAN id=3Dline-750 class=3Danchor></SPAN>   frame. There may only be =
one "MCI" frame in each tag.
<SPAN id=3Dline-751 class=3Danchor></SPAN>
<SPAN id=3Dline-752 class=3Danchor></SPAN>     Music CD identifier   =
"MCI"
<SPAN id=3Dline-753 class=3Danchor></SPAN>     Frame size            $xx =
xx xx
<SPAN id=3Dline-754 class=3Danchor></SPAN>     CD TOC                =
&lt;binary data&gt;
<SPAN id=3Dline-755 class=3Danchor></SPAN>
<SPAN id=3Dline-756 class=3Danchor></SPAN>
<SPAN id=3Dline-757 class=3Danchor></SPAN>4.6.   Event timing codes
<SPAN id=3Dline-758 class=3Danchor></SPAN>
<SPAN id=3Dline-759 class=3Danchor></SPAN>   This frame allows =
synchronisation with key events in a song or sound.
<SPAN id=3Dline-760 class=3Danchor></SPAN>   The head is:
<SPAN id=3Dline-761 class=3Danchor></SPAN>
<SPAN id=3Dline-762 class=3Danchor></SPAN>     Event timing codes   =
"ETC"
<SPAN id=3Dline-763 class=3Danchor></SPAN>     Frame size           $xx =
xx xx
<SPAN id=3Dline-764 class=3Danchor></SPAN>     Time stamp format    $xx
<SPAN id=3Dline-765 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-766 class=3Danchor></SPAN>   Where time stamp format is:
<SPAN id=3Dline-767 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-768 class=3Danchor></SPAN>     $01  Absolute time, 32 =
bit sized, using MPEG [MPEG] frames as unit
<SPAN id=3Dline-769 class=3Danchor></SPAN>     $02  Absolute time, 32 =
bit sized, using milliseconds as unit
<SPAN id=3Dline-770 class=3Danchor></SPAN>
<SPAN id=3Dline-771 class=3Danchor></SPAN>   Abolute time means that =
every stamp contains the time from the
<SPAN id=3Dline-772 class=3Danchor></SPAN>   beginning of the file.
<SPAN id=3Dline-773 class=3Danchor></SPAN>
<SPAN id=3Dline-774 class=3Danchor></SPAN>   Followed by a list of key =
events in the following format:
<SPAN id=3Dline-775 class=3Danchor></SPAN>
<SPAN id=3Dline-776 class=3Danchor></SPAN>     Type of event   $xx
<SPAN id=3Dline-777 class=3Danchor></SPAN>     Time stamp      $xx (xx =
...)
<SPAN id=3Dline-778 class=3Danchor></SPAN>
<SPAN id=3Dline-779 class=3Danchor></SPAN>   The 'Time stamp' is set to =
zero if directly at the beginning of the
<SPAN id=3Dline-780 class=3Danchor></SPAN>   sound or after the previous =
event. All events should be sorted in
<SPAN id=3Dline-781 class=3Danchor></SPAN>   chronological order. The =
type of event is as follows:
<SPAN id=3Dline-782 class=3Danchor></SPAN>
<SPAN id=3Dline-783 class=3Danchor></SPAN>     $00  padding (has no =
meaning)
<SPAN id=3Dline-784 class=3Danchor></SPAN>     $01  end of initial =
silence
<SPAN id=3Dline-785 class=3Danchor></SPAN>     $02  intro start
<SPAN id=3Dline-786 class=3Danchor></SPAN>     $03  mainpart start
<SPAN id=3Dline-787 class=3Danchor></SPAN>     $04  outro start
<SPAN id=3Dline-788 class=3Danchor></SPAN>     $05  outro end
<SPAN id=3Dline-789 class=3Danchor></SPAN>     $06  verse begins
<SPAN id=3Dline-790 class=3Danchor></SPAN>     $07  refrain begins
<SPAN id=3Dline-791 class=3Danchor></SPAN>     $08  interlude
<SPAN id=3Dline-792 class=3Danchor></SPAN>     $09  theme start
<SPAN id=3Dline-793 class=3Danchor></SPAN>     $0A  variation
<SPAN id=3Dline-794 class=3Danchor></SPAN>     $0B  key change
<SPAN id=3Dline-795 class=3Danchor></SPAN>     $0C  time change
<SPAN id=3Dline-796 class=3Danchor></SPAN>     $0D  unwanted noise =
(Snap, Crackle &amp; Pop)
<SPAN id=3Dline-797 class=3Danchor></SPAN>
<SPAN id=3Dline-798 class=3Danchor></SPAN>     $0E-$DF  reserved for =
future use
<SPAN id=3Dline-799 class=3Danchor></SPAN>
<SPAN id=3Dline-800 class=3Danchor></SPAN>     $E0-$EF  not predefined =
sync 0-F
<SPAN id=3Dline-801 class=3Danchor></SPAN>
<SPAN id=3Dline-802 class=3Danchor></SPAN>     $F0-$FC  reserved for =
future use
<SPAN id=3Dline-803 class=3Danchor></SPAN>
<SPAN id=3Dline-804 class=3Danchor></SPAN>     $FD  audio end (start of =
silence)
<SPAN id=3Dline-805 class=3Danchor></SPAN>     $FE  audio file ends
<SPAN id=3Dline-806 class=3Danchor></SPAN>     $FF  one more byte of =
events follows (all the following bytes with
<SPAN id=3Dline-807 class=3Danchor></SPAN>          the value $FF have =
the same function)
<SPAN id=3Dline-808 class=3Danchor></SPAN>
<SPAN id=3Dline-809 class=3Danchor></SPAN>   The 'Not predefined sync's =
($E0-EF) are for user events. You might
<SPAN id=3Dline-810 class=3Danchor></SPAN>   want to synchronise your =
music to something, like setting of an
<SPAN id=3Dline-811 class=3Danchor></SPAN>   explosion on-stage, turning =
on your screensaver etc.
<SPAN id=3Dline-812 class=3Danchor></SPAN>
<SPAN id=3Dline-813 class=3Danchor></SPAN>   There may only be one "ETC" =
frame in each tag.
<SPAN id=3Dline-814 class=3Danchor></SPAN>
<SPAN id=3Dline-815 class=3Danchor></SPAN>
<SPAN id=3Dline-816 class=3Danchor></SPAN>4.7.   MPEG location lookup =
table
<SPAN id=3Dline-817 class=3Danchor></SPAN>
<SPAN id=3Dline-818 class=3Danchor></SPAN>   To increase performance and =
accuracy of jumps within a MPEG [MPEG]
<SPAN id=3Dline-819 class=3Danchor></SPAN>   audio file, frames with =
timecodes in different locations in the file
<SPAN id=3Dline-820 class=3Danchor></SPAN>   might be useful. The ID3 =
frame includes references that the software
<SPAN id=3Dline-821 class=3Danchor></SPAN>   can use to calculate =
positions in the file. After the frame header is
<SPAN id=3Dline-822 class=3Danchor></SPAN>   a descriptor of how much =
the 'frame counter' should increase for every
<SPAN id=3Dline-823 class=3Danchor></SPAN>   reference. If this value is =
two then the first reference points out
<SPAN id=3Dline-824 class=3Danchor></SPAN>   the second frame, the 2nd =
reference the 4th frame, the 3rd reference
<SPAN id=3Dline-825 class=3Danchor></SPAN>   the 6th frame etc. In a =
similar way the 'bytes between reference' and
<SPAN id=3Dline-826 class=3Danchor></SPAN>   'milliseconds between =
reference' points out bytes and milliseconds
<SPAN id=3Dline-827 class=3Danchor></SPAN>   respectively.
<SPAN id=3Dline-828 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-829 class=3Danchor></SPAN>   Each reference consists of =
two parts; a certain number of bits, as
<SPAN id=3Dline-830 class=3Danchor></SPAN>   defined in 'bits for bytes =
deviation', that describes the difference
<SPAN id=3Dline-831 class=3Danchor></SPAN>   between what is said in =
'bytes between reference' and the reality and
<SPAN id=3Dline-832 class=3Danchor></SPAN>   a certain number of bits, =
as defined in 'bits for milliseconds
<SPAN id=3Dline-833 class=3Danchor></SPAN>   deviation', that describes =
the difference between what is said in
<SPAN id=3Dline-834 class=3Danchor></SPAN>   'milliseconds between =
reference' and the reality. The number of bits
<SPAN id=3Dline-835 class=3Danchor></SPAN>   in every reference, i.e. =
'bits for bytes deviation'+'bits for
<SPAN id=3Dline-836 class=3Danchor></SPAN>   milliseconds deviation', =
must be a multiple of four. There may only be
<SPAN id=3Dline-837 class=3Danchor></SPAN>   one "MLL" frame in each =
tag.
<SPAN id=3Dline-838 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-839 class=3Danchor></SPAN>     Location lookup table     =
     "MLL"
<SPAN id=3Dline-840 class=3Danchor></SPAN>     ID3 frame size            =
     $xx xx xx
<SPAN id=3Dline-841 class=3Danchor></SPAN>     MPEG frames between =
reference  $xx xx
<SPAN id=3Dline-842 class=3Danchor></SPAN>     Bytes between reference   =
     $xx xx xx
<SPAN id=3Dline-843 class=3Danchor></SPAN>     Milliseconds between =
reference $xx xx xx
<SPAN id=3Dline-844 class=3Danchor></SPAN>     Bits for bytes deviation  =
     $xx
<SPAN id=3Dline-845 class=3Danchor></SPAN>     Bits for milliseconds =
dev.     $xx
<SPAN id=3Dline-846 class=3Danchor></SPAN>
<SPAN id=3Dline-847 class=3Danchor></SPAN>   Then for every reference =
the following data is included;
<SPAN id=3Dline-848 class=3Danchor></SPAN>
<SPAN id=3Dline-849 class=3Danchor></SPAN>     Deviation in bytes        =
 %xxx....
<SPAN id=3Dline-850 class=3Danchor></SPAN>     Deviation in milliseconds =
 %xxx....
<SPAN id=3Dline-851 class=3Danchor></SPAN>
<SPAN id=3Dline-852 class=3Danchor></SPAN>
<SPAN id=3Dline-853 class=3Danchor></SPAN>4.8.   Synced tempo codes
<SPAN id=3Dline-854 class=3Danchor></SPAN>
<SPAN id=3Dline-855 class=3Danchor></SPAN>   For a more accurate =
description of the tempo of a musical piece this
<SPAN id=3Dline-856 class=3Danchor></SPAN>   frame might be used. After =
the header follows one byte describing
<SPAN id=3Dline-857 class=3Danchor></SPAN>   which time stamp format =
should be used. Then follows one or more tempo
<SPAN id=3Dline-858 class=3Danchor></SPAN>   codes. Each tempo code =
consists of one tempo part and one time part.
<SPAN id=3Dline-859 class=3Danchor></SPAN>   The tempo is in BPM =
described with one or two bytes. If the first byte
<SPAN id=3Dline-860 class=3Danchor></SPAN>   has the value $FF, one more =
byte follows, which is added to the first
<SPAN id=3Dline-861 class=3Danchor></SPAN>   giving a range from 2 - 510 =
BPM, since $00 and $01 is reserved. $00 is
<SPAN id=3Dline-862 class=3Danchor></SPAN>   used to describe a =
beat-free time period, which is not the same as a
<SPAN id=3Dline-863 class=3Danchor></SPAN>   music-free time period. $01 =
is used to indicate one single beat-stroke
<SPAN id=3Dline-864 class=3Danchor></SPAN>   followed by a beat-free =
period.
<SPAN id=3Dline-865 class=3Danchor></SPAN>
<SPAN id=3Dline-866 class=3Danchor></SPAN>   The tempo descriptor is =
followed by a time stamp. Every time the tempo
<SPAN id=3Dline-867 class=3Danchor></SPAN>   in the music changes, a =
tempo descriptor may indicate this for the
<SPAN id=3Dline-868 class=3Danchor></SPAN>   player. All tempo =
descriptors should be sorted in chronological order.
<SPAN id=3Dline-869 class=3Danchor></SPAN>   The first beat-stroke in a =
time-period is at the same time as the beat
<SPAN id=3Dline-870 class=3Danchor></SPAN>   description occurs. There =
may only be one "STC" frame in each tag.
<SPAN id=3Dline-871 class=3Danchor></SPAN>
<SPAN id=3Dline-872 class=3Danchor></SPAN>     Synced tempo codes  "STC"
<SPAN id=3Dline-873 class=3Danchor></SPAN>     Frame size          $xx =
xx xx
<SPAN id=3Dline-874 class=3Danchor></SPAN>     Time stamp format   $xx
<SPAN id=3Dline-875 class=3Danchor></SPAN>     Tempo data          =
&lt;binary data&gt;
<SPAN id=3Dline-876 class=3Danchor></SPAN>
<SPAN id=3Dline-877 class=3Danchor></SPAN>   Where time stamp format is:
<SPAN id=3Dline-878 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-879 class=3Danchor></SPAN>     $01  Absolute time, 32 =
bit sized, using MPEG [MPEG] frames as unit
<SPAN id=3Dline-880 class=3Danchor></SPAN>     $02  Absolute time, 32 =
bit sized, using milliseconds as unit
<SPAN id=3Dline-881 class=3Danchor></SPAN>
<SPAN id=3Dline-882 class=3Danchor></SPAN>   Abolute time means that =
every stamp contains the time from the
<SPAN id=3Dline-883 class=3Danchor></SPAN>   beginning of the file.
<SPAN id=3Dline-884 class=3Danchor></SPAN>
<SPAN id=3Dline-885 class=3Danchor></SPAN>
<SPAN id=3Dline-886 class=3Danchor></SPAN>4.9.   Unsychronised =
lyrics/text transcription
<SPAN id=3Dline-887 class=3Danchor></SPAN>
<SPAN id=3Dline-888 class=3Danchor></SPAN>   This frame contains the =
lyrics of the song or a text transcription of
<SPAN id=3Dline-889 class=3Danchor></SPAN>   other vocal activities. The =
head includes an encoding descriptor and
<SPAN id=3Dline-890 class=3Danchor></SPAN>   a content descriptor. The =
body consists of the actual text. The
<SPAN id=3Dline-891 class=3Danchor></SPAN>   'Content descriptor' is a =
terminated string. If no descriptor is
<SPAN id=3Dline-892 class=3Danchor></SPAN>   entered, 'Content =
descriptor' is $00 (00) only. Newline characters
<SPAN id=3Dline-893 class=3Danchor></SPAN>   are allowed in the text. =
Maximum length for the descriptor is 64
<SPAN id=3Dline-894 class=3Danchor></SPAN>   bytes. There may be more =
than one lyrics/text frame in each tag, but
<SPAN id=3Dline-895 class=3Danchor></SPAN>   only one with the same =
language and content descriptor.
<SPAN id=3Dline-896 class=3Danchor></SPAN>
<SPAN id=3Dline-897 class=3Danchor></SPAN>     Unsynced lyrics/text =
"ULT"
<SPAN id=3Dline-898 class=3Danchor></SPAN>     Frame size           $xx =
xx xx
<SPAN id=3Dline-899 class=3Danchor></SPAN>     Text encoding        $xx
<SPAN id=3Dline-900 class=3Danchor></SPAN>     Language             $xx =
xx xx
<SPAN id=3Dline-901 class=3Danchor></SPAN>     Content descriptor   =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-902 class=3Danchor></SPAN>     Lyrics/text          =
&lt;textstring&gt;
<SPAN id=3Dline-903 class=3Danchor></SPAN>
<SPAN id=3Dline-904 class=3Danchor></SPAN>
<SPAN id=3Dline-905 class=3Danchor></SPAN>4.10.   Synchronised =
lyrics/text
<SPAN id=3Dline-906 class=3Danchor></SPAN>
<SPAN id=3Dline-907 class=3Danchor></SPAN>   This is another way of =
incorporating the words, said or sung lyrics,
<SPAN id=3Dline-908 class=3Danchor></SPAN>   in the audio file as text, =
this time, however, in sync with the audio.
<SPAN id=3Dline-909 class=3Danchor></SPAN>   It might also be used to =
describing events e.g. occurring on a stage
<SPAN id=3Dline-910 class=3Danchor></SPAN>   or on the screen in sync =
with the audio. The header includes a content
<SPAN id=3Dline-911 class=3Danchor></SPAN>   descriptor, represented =
with as terminated textstring. If no
<SPAN id=3Dline-912 class=3Danchor></SPAN>   descriptor is entered, =
'Content descriptor' is $00 (00) only.
<SPAN id=3Dline-913 class=3Danchor></SPAN>
<SPAN id=3Dline-914 class=3Danchor></SPAN>     Synced lyrics/text   =
"SLT"
<SPAN id=3Dline-915 class=3Danchor></SPAN>     Frame size           $xx =
xx xx
<SPAN id=3Dline-916 class=3Danchor></SPAN>     Text encoding        $xx
<SPAN id=3Dline-917 class=3Danchor></SPAN>     Language             $xx =
xx xx
<SPAN id=3Dline-918 class=3Danchor></SPAN>     Time stamp format    $xx
<SPAN id=3Dline-919 class=3Danchor></SPAN>     Content type         $xx
<SPAN id=3Dline-920 class=3Danchor></SPAN>     Content descriptor   =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-921 class=3Danchor></SPAN>
<SPAN id=3Dline-922 class=3Danchor></SPAN>
<SPAN id=3Dline-923 class=3Danchor></SPAN>   Encoding:   $00  ISO-8859-1 =
[ISO-8859-1] character set is used =3D&gt; $00
<SPAN id=3Dline-924 class=3Danchor></SPAN>                    is sync =
identifier.
<SPAN id=3Dline-925 class=3Danchor></SPAN>               $01  Unicode =
[UNICODE] character set is used =3D&gt; $00 00 is
<SPAN id=3Dline-926 class=3Danchor></SPAN>                    sync =
identifier.
<SPAN id=3Dline-927 class=3Danchor></SPAN>
<SPAN id=3Dline-928 class=3Danchor></SPAN>   Content type:   $00 is =
other
<SPAN id=3Dline-929 class=3Danchor></SPAN>                   $01 is =
lyrics
<SPAN id=3Dline-930 class=3Danchor></SPAN>                   $02 is text =
transcription
<SPAN id=3Dline-931 class=3Danchor></SPAN>                   $03 is =
movement/part name (e.g. "Adagio")
<SPAN id=3Dline-932 class=3Danchor></SPAN>                   $04 is =
events (e.g. "Don Quijote enters the stage")
<SPAN id=3Dline-933 class=3Danchor></SPAN>                   $05 is =
chord (e.g. "Bb F Fsus")
<SPAN id=3Dline-934 class=3Danchor></SPAN>
<SPAN id=3Dline-935 class=3Danchor></SPAN>   Time stamp format is:
<SPAN id=3Dline-936 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-937 class=3Danchor></SPAN>     $01  Absolute time, 32 =
bit sized, using MPEG [MPEG] frames as unit
<SPAN id=3Dline-938 class=3Danchor></SPAN>     $02  Absolute time, 32 =
bit sized, using milliseconds as unit
<SPAN id=3Dline-939 class=3Danchor></SPAN>
<SPAN id=3Dline-940 class=3Danchor></SPAN>   Abolute time means that =
every stamp contains the time from the
<SPAN id=3Dline-941 class=3Danchor></SPAN>   beginning of the file.
<SPAN id=3Dline-942 class=3Danchor></SPAN>
<SPAN id=3Dline-943 class=3Danchor></SPAN>   The text that follows the =
frame header differs from that of the
<SPAN id=3Dline-944 class=3Danchor></SPAN>   unsynchronised lyrics/text =
transcription in one major way. Each
<SPAN id=3Dline-945 class=3Danchor></SPAN>   syllable (or whatever size =
of text is considered to be convenient by
<SPAN id=3Dline-946 class=3Danchor></SPAN>   the encoder) is a null =
terminated string followed by a time stamp
<SPAN id=3Dline-947 class=3Danchor></SPAN>   denoting where in the sound =
file it belongs. Each sync thus has the
<SPAN id=3Dline-948 class=3Danchor></SPAN>   following structure:
<SPAN id=3Dline-949 class=3Danchor></SPAN>
<SPAN id=3Dline-950 class=3Danchor></SPAN>     Terminated text to be =
synced (typically a syllable)
<SPAN id=3Dline-951 class=3Danchor></SPAN>     Sync identifier =
(terminator to above string)   $00 (00)
<SPAN id=3Dline-952 class=3Danchor></SPAN>     Time stamp                =
                     $xx (xx ...)
<SPAN id=3Dline-953 class=3Danchor></SPAN>
<SPAN id=3Dline-954 class=3Danchor></SPAN>   The 'time stamp' is set to =
zero or the whole sync is omitted if
<SPAN id=3Dline-955 class=3Danchor></SPAN>   located directly at the =
beginning of the sound. All time stamps should
<SPAN id=3Dline-956 class=3Danchor></SPAN>   be sorted in chronological =
order. The sync can be considered as a
<SPAN id=3Dline-957 class=3Danchor></SPAN>   validator of the subsequent =
string.
<SPAN id=3Dline-958 class=3Danchor></SPAN>
<SPAN id=3Dline-959 class=3Danchor></SPAN>   Newline characters are =
allowed in all "SLT" frames and should be used
<SPAN id=3Dline-960 class=3Danchor></SPAN>   after every entry (name, =
event etc.) in a frame with the content type
<SPAN id=3Dline-961 class=3Danchor></SPAN>   $03 - $04.
<SPAN id=3Dline-962 class=3Danchor></SPAN>
<SPAN id=3Dline-963 class=3Danchor></SPAN>   A few considerations =
regarding whitespace characters: Whitespace
<SPAN id=3Dline-964 class=3Danchor></SPAN>   separating words should =
mark the beginning of a new word, thus
<SPAN id=3Dline-965 class=3Danchor></SPAN>   occurring in front of the =
first syllable of a new word. This is also
<SPAN id=3Dline-966 class=3Danchor></SPAN>   valid for new line =
characters. A syllable followed by a comma should
<SPAN id=3Dline-967 class=3Danchor></SPAN>   not be broken apart with a =
sync (both the syllable and the comma
<SPAN id=3Dline-968 class=3Danchor></SPAN>   should be before the sync).
<SPAN id=3Dline-969 class=3Danchor></SPAN>
<SPAN id=3Dline-970 class=3Danchor></SPAN>   An example: The "ULT" =
passage
<SPAN id=3Dline-971 class=3Danchor></SPAN>
<SPAN id=3Dline-972 class=3Danchor></SPAN>     "Strangers in the night" =
$0A "Exchanging glances"
<SPAN id=3Dline-973 class=3Danchor></SPAN>
<SPAN id=3Dline-974 class=3Danchor></SPAN>   would be "SLT" encoded as:
<SPAN id=3Dline-975 class=3Danchor></SPAN>
<SPAN id=3Dline-976 class=3Danchor></SPAN>     "Strang" $00 xx xx "ers" =
$00 xx xx " in" $00 xx xx " the" $00 xx xx
<SPAN id=3Dline-977 class=3Danchor></SPAN>     " night" $00 xx xx 0A =
"Ex" $00 xx xx "chang" $00 xx xx "ing" $00 xx
<SPAN id=3Dline-978 class=3Danchor></SPAN>     xx "glan" $00 xx xx "ces" =
$00 xx xx
<SPAN id=3Dline-979 class=3Danchor></SPAN>
<SPAN id=3Dline-980 class=3Danchor></SPAN>   There may be more than one =
"SLT" frame in each tag, but only one with
<SPAN id=3Dline-981 class=3Danchor></SPAN>   the same language and =
content descriptor.
<SPAN id=3Dline-982 class=3Danchor></SPAN>
<SPAN id=3Dline-983 class=3Danchor></SPAN>
<SPAN id=3Dline-984 class=3Danchor></SPAN>4.11.   Comments
<SPAN id=3Dline-985 class=3Danchor></SPAN>
<SPAN id=3Dline-986 class=3Danchor></SPAN>   This frame replaces the old =
30-character comment field in ID3v1. It
<SPAN id=3Dline-987 class=3Danchor></SPAN>   consists of a frame head =
followed by encoding, language and content
<SPAN id=3Dline-988 class=3Danchor></SPAN>   descriptors and is ended =
with the actual comment as a text string.
<SPAN id=3Dline-989 class=3Danchor></SPAN>   Newline characters are =
allowed in the comment text string. There may
<SPAN id=3Dline-990 class=3Danchor></SPAN>   be more than one comment =
frame in each tag, but only one with the same
<SPAN id=3Dline-991 class=3Danchor></SPAN>   language and content =
descriptor.
<SPAN id=3Dline-992 class=3Danchor></SPAN>
<SPAN id=3Dline-993 class=3Danchor></SPAN>     Comment                   =
"COM"
<SPAN id=3Dline-994 class=3Danchor></SPAN>     Frame size                =
$xx xx xx
<SPAN id=3Dline-995 class=3Danchor></SPAN>     Text encoding             =
$xx
<SPAN id=3Dline-996 class=3Danchor></SPAN>     Language                  =
$xx xx xx
<SPAN id=3Dline-997 class=3Danchor></SPAN>     Short content description =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-998 class=3Danchor></SPAN>     The actual text           =
&lt;textstring&gt;
<SPAN id=3Dline-999 class=3Danchor></SPAN>
<SPAN id=3Dline-1000 class=3Danchor></SPAN>
<SPAN id=3Dline-1001 class=3Danchor></SPAN>4.12.   Relative volume =
adjustment
<SPAN id=3Dline-1002 class=3Danchor></SPAN>
<SPAN id=3Dline-1003 class=3Danchor></SPAN>   This is a more subjective =
function than the previous ones. It allows
<SPAN id=3Dline-1004 class=3Danchor></SPAN>   the user to say how much =
he wants to increase/decrease the volume on
<SPAN id=3Dline-1005 class=3Danchor></SPAN>   each channel while the =
file is played. The purpose is to be able to
<SPAN id=3Dline-1006 class=3Danchor></SPAN>   align all files to a =
reference volume, so that you don't have to
<SPAN id=3Dline-1007 class=3Danchor></SPAN>   change the volume =
constantly. This frame may also be used to balance
<SPAN id=3Dline-1008 class=3Danchor></SPAN>   adjust the audio. If the =
volume peak levels are known then this could
<SPAN id=3Dline-1009 class=3Danchor></SPAN>   be described with the =
'Peak volume right' and 'Peak volume left'
<SPAN id=3Dline-1010 class=3Danchor></SPAN>   field. If Peakvolume is =
not known these fields could be left zeroed
<SPAN id=3Dline-1011 class=3Danchor></SPAN>   or completely omitted.  =
There may only be one "RVA" frame in each
<SPAN id=3Dline-1012 class=3Danchor></SPAN>   tag.
<SPAN id=3Dline-1013 class=3Danchor></SPAN>
<SPAN id=3Dline-1014 class=3Danchor></SPAN>     Relative volume =
adjustment    "RVA"
<SPAN id=3Dline-1015 class=3Danchor></SPAN>     Frame size               =
     $xx xx xx
<SPAN id=3Dline-1016 class=3Danchor></SPAN>     Increment/decrement      =
     %000000xx
<SPAN id=3Dline-1017 class=3Danchor></SPAN>     Bits used for volume =
descr.   $xx
<SPAN id=3Dline-1018 class=3Danchor></SPAN>     Relative volume change, =
right $xx xx (xx ...)
<SPAN id=3Dline-1019 class=3Danchor></SPAN>     Relative volume change, =
left  $xx xx (xx ...)
<SPAN id=3Dline-1020 class=3Danchor></SPAN>     Peak volume right        =
     $xx xx (xx ...)
<SPAN id=3Dline-1021 class=3Danchor></SPAN>     Peak volume left         =
     $xx xx (xx ...)
<SPAN id=3Dline-1022 class=3Danchor></SPAN>
<SPAN id=3Dline-1023 class=3Danchor></SPAN>   In the increment/decrement =
field bit 0 is used to indicate the right
<SPAN id=3Dline-1024 class=3Danchor></SPAN>   channel and bit 1 is used =
to indicate the left channel. 1 is
<SPAN id=3Dline-1025 class=3Danchor></SPAN>   increment and 0 is =
decrement.
<SPAN id=3Dline-1026 class=3Danchor></SPAN>
<SPAN id=3Dline-1027 class=3Danchor></SPAN>   The 'bits used for volume =
description' field is normally $10 (16 bits)
<SPAN id=3Dline-1028 class=3Danchor></SPAN>   for MPEG 2 layer I, II and =
III [MPEG] and MPEG 2.5. This value may not
<SPAN id=3Dline-1029 class=3Danchor></SPAN>   be $00. The volume is =
always represented with whole bytes, padded in
<SPAN id=3Dline-1030 class=3Danchor></SPAN>   the beginning (highest =
bits) when 'bits used for volume description'
<SPAN id=3Dline-1031 class=3Danchor></SPAN>   is not a multiple of =
eight.
<SPAN id=3Dline-1032 class=3Danchor></SPAN>
<SPAN id=3Dline-1033 class=3Danchor></SPAN>
<SPAN id=3Dline-1034 class=3Danchor></SPAN>4.13.   Equalisation
<SPAN id=3Dline-1035 class=3Danchor></SPAN>
<SPAN id=3Dline-1036 class=3Danchor></SPAN>   This is another =
subjective, alignment frame. It allows the user to
<SPAN id=3Dline-1037 class=3Danchor></SPAN>   predefine an equalisation =
curve within the audio file. There may only
<SPAN id=3Dline-1038 class=3Danchor></SPAN>   be one "EQU" frame in each =
tag.
<SPAN id=3Dline-1039 class=3Danchor></SPAN>
<SPAN id=3Dline-1040 class=3Danchor></SPAN>     Equalisation       "EQU"
<SPAN id=3Dline-1041 class=3Danchor></SPAN>     Frame size         $xx =
xx xx
<SPAN id=3Dline-1042 class=3Danchor></SPAN>     Adjustment bits    $xx
<SPAN id=3Dline-1043 class=3Danchor></SPAN>
<SPAN id=3Dline-1044 class=3Danchor></SPAN>   The 'adjustment bits' =
field defines the number of bits used for
<SPAN id=3Dline-1045 class=3Danchor></SPAN>   representation of the =
adjustment. This is normally $10 (16 bits) for
<SPAN id=3Dline-1046 class=3Danchor></SPAN>   MPEG 2 layer I, II and III =
[MPEG] and MPEG 2.5. This value may not be
<SPAN id=3Dline-1047 class=3Danchor></SPAN>   $00.
<SPAN id=3Dline-1048 class=3Danchor></SPAN>
<SPAN id=3Dline-1049 class=3Danchor></SPAN>   This is followed by 2 =
bytes + ('adjustment bits' rounded up to the
<SPAN id=3Dline-1050 class=3Danchor></SPAN>   nearest byte) for every =
equalisation band in the following format,
<SPAN id=3Dline-1051 class=3Danchor></SPAN>   giving a frequency range =
of 0 - 32767Hz:
<SPAN id=3Dline-1052 class=3Danchor></SPAN>
<SPAN id=3Dline-1053 class=3Danchor></SPAN>     Increment/decrement   %x =
(MSB of the Frequency)
<SPAN id=3Dline-1054 class=3Danchor></SPAN>     Frequency             =
(lower 15 bits)
<SPAN id=3Dline-1055 class=3Danchor></SPAN>     Adjustment            =
$xx (xx ...)
<SPAN id=3Dline-1056 class=3Danchor></SPAN>
<SPAN id=3Dline-1057 class=3Danchor></SPAN>   The increment/decrement =
bit is 1 for increment and 0 for decrement.
<SPAN id=3Dline-1058 class=3Danchor></SPAN>   The equalisation bands =
should be ordered increasingly with reference
<SPAN id=3Dline-1059 class=3Danchor></SPAN>   to frequency. All =
frequencies don't have to be declared. Adjustments
<SPAN id=3Dline-1060 class=3Danchor></SPAN>   with the value $00 should =
be omitted. A frequency should only be
<SPAN id=3Dline-1061 class=3Danchor></SPAN>   described once in the =
frame.
<SPAN id=3Dline-1062 class=3Danchor></SPAN>
<SPAN id=3Dline-1063 class=3Danchor></SPAN>
<SPAN id=3Dline-1064 class=3Danchor></SPAN>4.14.   Reverb
<SPAN id=3Dline-1065 class=3Danchor></SPAN>
<SPAN id=3Dline-1066 class=3Danchor></SPAN>   Yet another subjective =
one. You may here adjust echoes of different
<SPAN id=3Dline-1067 class=3Danchor></SPAN>   kinds. Reverb left/right =
is the delay between every bounce in ms.
<SPAN id=3Dline-1068 class=3Danchor></SPAN>   Reverb bounces left/right =
is the number of bounces that should be
<SPAN id=3Dline-1069 class=3Danchor></SPAN>   made. $FF equals an =
infinite number of bounces. Feedback is the amount
<SPAN id=3Dline-1070 class=3Danchor></SPAN>   of volume that should be =
returned to the next echo bounce. $00 is 0%,
<SPAN id=3Dline-1071 class=3Danchor></SPAN>   $FF is 100%. If this value =
were $7F, there would be 50% volume
<SPAN id=3Dline-1072 class=3Danchor></SPAN>   reduction on the first =
bounce, yet 50% on the second and so on. Left
<SPAN id=3Dline-1073 class=3Danchor></SPAN>   to left means the sound =
from the left bounce to be played in the left
<SPAN id=3Dline-1074 class=3Danchor></SPAN>   speaker, while left to =
right means sound from the left bounce to be
<SPAN id=3Dline-1075 class=3Danchor></SPAN>   played in the right =
speaker.
<SPAN id=3Dline-1076 class=3Danchor></SPAN>
<SPAN id=3Dline-1077 class=3Danchor></SPAN>   'Premix left to right' is =
the amount of left sound to be mixed in the
<SPAN id=3Dline-1078 class=3Danchor></SPAN>   right before any reverb is =
applied, where $00 id 0% and $FF is 100%.
<SPAN id=3Dline-1079 class=3Danchor></SPAN>   'Premix right to left' =
does the same thing, but right to left. Setting
<SPAN id=3Dline-1080 class=3Danchor></SPAN>   both premix to $FF would =
result in a mono output (if the reverb is
<SPAN id=3Dline-1081 class=3Danchor></SPAN>   applied symmetric). There =
may only be one "REV" frame in each tag.
<SPAN id=3Dline-1082 class=3Danchor></SPAN>
<SPAN id=3Dline-1083 class=3Danchor></SPAN>     Reverb settings          =
        "REV"
<SPAN id=3Dline-1084 class=3Danchor></SPAN>     Frame size               =
        $00 00 0C
<SPAN id=3Dline-1085 class=3Danchor></SPAN>     Reverb left (ms)         =
        $xx xx
<SPAN id=3Dline-1086 class=3Danchor></SPAN>     Reverb right (ms)        =
        $xx xx
<SPAN id=3Dline-1087 class=3Danchor></SPAN>     Reverb bounces, left     =
        $xx
<SPAN id=3Dline-1088 class=3Danchor></SPAN>     Reverb bounces, right    =
        $xx
<SPAN id=3Dline-1089 class=3Danchor></SPAN>     Reverb feedback, left to =
left    $xx
<SPAN id=3Dline-1090 class=3Danchor></SPAN>     Reverb feedback, left to =
right   $xx
<SPAN id=3Dline-1091 class=3Danchor></SPAN>     Reverb feedback, right =
to right  $xx
<SPAN id=3Dline-1092 class=3Danchor></SPAN>     Reverb feedback, right =
to left   $xx
<SPAN id=3Dline-1093 class=3Danchor></SPAN>     Premix left to right     =
        $xx
<SPAN id=3Dline-1094 class=3Danchor></SPAN>     Premix right to left     =
        $xx
<SPAN id=3Dline-1095 class=3Danchor></SPAN>
<SPAN id=3Dline-1096 class=3Danchor></SPAN>
<SPAN id=3Dline-1097 class=3Danchor></SPAN>4.15.   Attached picture
<SPAN id=3Dline-1098 class=3Danchor></SPAN>
<SPAN id=3Dline-1099 class=3Danchor></SPAN>   This frame contains a =
picture directly related to the audio file.
<SPAN id=3Dline-1100 class=3Danchor></SPAN>   Image format is preferably =
"PNG" [PNG] or "JPG" [JFIF]. Description
<SPAN id=3Dline-1101 class=3Danchor></SPAN>   is a short description of =
the picture, represented as a terminated
<SPAN id=3Dline-1102 class=3Danchor></SPAN>   textstring. The =
description has a maximum length of 64 characters,
<SPAN id=3Dline-1103 class=3Danchor></SPAN>   but may be empty. There =
may be several pictures attached to one file,
<SPAN id=3Dline-1104 class=3Danchor></SPAN>   each in their individual =
"PIC" frame, but only one with the same
<SPAN id=3Dline-1105 class=3Danchor></SPAN>   content descriptor. There =
may only be one picture with the picture
<SPAN id=3Dline-1106 class=3Danchor></SPAN>   type declared as picture =
type $01 and $02 respectively. There is a
<SPAN id=3Dline-1107 class=3Danchor></SPAN>   possibility to put only a =
link to the image file by using the 'image
<SPAN id=3Dline-1108 class=3Danchor></SPAN>   format' "--&gt;" and =
having a complete URL [URL] instead of picture data.
<SPAN id=3Dline-1109 class=3Danchor></SPAN>   The use of linked files =
should however be used restrictively since
<SPAN id=3Dline-1110 class=3Danchor></SPAN>   there is the risk of =
separation of files.
<SPAN id=3Dline-1111 class=3Danchor></SPAN>
<SPAN id=3Dline-1112 class=3Danchor></SPAN>     Attached picture   "PIC"
<SPAN id=3Dline-1113 class=3Danchor></SPAN>     Frame size         $xx =
xx xx
<SPAN id=3Dline-1114 class=3Danchor></SPAN>     Text encoding      $xx
<SPAN id=3Dline-1115 class=3Danchor></SPAN>     Image format       $xx =
xx xx
<SPAN id=3Dline-1116 class=3Danchor></SPAN>     Picture type       $xx
<SPAN id=3Dline-1117 class=3Danchor></SPAN>     Description        =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1118 class=3Danchor></SPAN>     Picture data       =
&lt;binary data&gt;
<SPAN id=3Dline-1119 class=3Danchor></SPAN>
<SPAN id=3Dline-1120 class=3Danchor></SPAN>
<SPAN id=3Dline-1121 class=3Danchor></SPAN>   Picture type:  $00  Other
<SPAN id=3Dline-1122 class=3Danchor></SPAN>                  $01  32x32 =
pixels 'file icon' (PNG only)
<SPAN id=3Dline-1123 class=3Danchor></SPAN>                  $02  Other =
file icon
<SPAN id=3Dline-1124 class=3Danchor></SPAN>                  $03  Cover =
(front)
<SPAN id=3Dline-1125 class=3Danchor></SPAN>                  $04  Cover =
(back)
<SPAN id=3Dline-1126 class=3Danchor></SPAN>                  $05  =
Leaflet page
<SPAN id=3Dline-1127 class=3Danchor></SPAN>                  $06  Media =
(e.g. lable side of CD)
<SPAN id=3Dline-1128 class=3Danchor></SPAN>                  $07  Lead =
artist/lead performer/soloist
<SPAN id=3Dline-1129 class=3Danchor></SPAN>                  $08  =
Artist/performer
<SPAN id=3Dline-1130 class=3Danchor></SPAN>                  $09  =
Conductor
<SPAN id=3Dline-1131 class=3Danchor></SPAN>                  $0A  =
Band/Orchestra
<SPAN id=3Dline-1132 class=3Danchor></SPAN>                  $0B  =
Composer
<SPAN id=3Dline-1133 class=3Danchor></SPAN>                  $0C  =
Lyricist/text writer
<SPAN id=3Dline-1134 class=3Danchor></SPAN>                  $0D  =
Recording Location
<SPAN id=3Dline-1135 class=3Danchor></SPAN>                  $0E  During =
recording
<SPAN id=3Dline-1136 class=3Danchor></SPAN>                  $0F  During =
performance
<SPAN id=3Dline-1137 class=3Danchor></SPAN>                  $10  =
Movie/video screen capture
<SPAN id=3Dline-1138 class=3Danchor></SPAN>                  $11  A =
bright coloured fish
<SPAN id=3Dline-1139 class=3Danchor></SPAN>                  $12  =
Illustration
<SPAN id=3Dline-1140 class=3Danchor></SPAN>                  $13  =
Band/artist logotype
<SPAN id=3Dline-1141 class=3Danchor></SPAN>                  $14  =
Publisher/Studio logotype
<SPAN id=3Dline-1142 class=3Danchor></SPAN>
<SPAN id=3Dline-1143 class=3Danchor></SPAN>
<SPAN id=3Dline-1144 class=3Danchor></SPAN>4.16.   General encapsulated =
object
<SPAN id=3Dline-1145 class=3Danchor></SPAN>
<SPAN id=3Dline-1146 class=3Danchor></SPAN>   In this frame any type of =
file can be encapsulated. After the header,
<SPAN id=3Dline-1147 class=3Danchor></SPAN>   'Frame size' and =
'Encoding' follows 'MIME type' [MIME] and 'Filename'
<SPAN id=3Dline-1148 class=3Danchor></SPAN>   for the encapsulated =
object, both represented as terminated strings
<SPAN id=3Dline-1149 class=3Danchor></SPAN>   encoded with ISO 8859-1 =
[ISO-8859-1]. The filename is case sensitive.
<SPAN id=3Dline-1150 class=3Danchor></SPAN>   Then follows a content =
description as terminated string, encoded as
<SPAN id=3Dline-1151 class=3Danchor></SPAN>   'Encoding'. The last thing =
in the frame is the actual object. The
<SPAN id=3Dline-1152 class=3Danchor></SPAN>   first two strings may be =
omitted, leaving only their terminations.
<SPAN id=3Dline-1153 class=3Danchor></SPAN>   MIME type is always an =
ISO-8859-1 text string. There may be more than
<SPAN id=3Dline-1154 class=3Danchor></SPAN>   one "GEO" frame in each =
tag, but only one with the same content
<SPAN id=3Dline-1155 class=3Danchor></SPAN>   descriptor.
<SPAN id=3Dline-1156 class=3Danchor></SPAN>
<SPAN id=3Dline-1157 class=3Danchor></SPAN>     General encapsulated =
object "GEO"
<SPAN id=3Dline-1158 class=3Danchor></SPAN>     Frame size               =
   $xx xx xx
<SPAN id=3Dline-1159 class=3Danchor></SPAN>     Text encoding            =
   $xx
<SPAN id=3Dline-1160 class=3Danchor></SPAN>     MIME type                =
   &lt;textstring&gt; $00
<SPAN id=3Dline-1161 class=3Danchor></SPAN>     Filename                 =
   &lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1162 class=3Danchor></SPAN>     Content description      =
   &lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1163 class=3Danchor></SPAN>     Encapsulated object      =
   &lt;binary data&gt;
<SPAN id=3Dline-1164 class=3Danchor></SPAN>
<SPAN id=3Dline-1165 class=3Danchor></SPAN>
<SPAN id=3Dline-1166 class=3Danchor></SPAN>4.17.   Play counter
<SPAN id=3Dline-1167 class=3Danchor></SPAN>
<SPAN id=3Dline-1168 class=3Danchor></SPAN>   This is simply a counter =
of the number of times a file has been
<SPAN id=3Dline-1169 class=3Danchor></SPAN>   played. The value is =
increased by one every time the file begins to
<SPAN id=3Dline-1170 class=3Danchor></SPAN>   play. There may only be =
one "CNT" frame in each tag. When the counter
<SPAN id=3Dline-1171 class=3Danchor></SPAN>   reaches all one's, one =
byte is inserted in front of the counter thus
<SPAN id=3Dline-1172 class=3Danchor></SPAN>   making the counter eight =
bits bigger.  The counter must be at least
<SPAN id=3Dline-1173 class=3Danchor></SPAN>   32-bits long to begin =
with.
<SPAN id=3Dline-1174 class=3Danchor></SPAN>
<SPAN id=3Dline-1175 class=3Danchor></SPAN>     Play counter   "CNT"
<SPAN id=3Dline-1176 class=3Danchor></SPAN>     Frame size     $xx xx xx
<SPAN id=3Dline-1177 class=3Danchor></SPAN>     Counter        $xx xx xx =
xx (xx ...)
<SPAN id=3Dline-1178 class=3Danchor></SPAN>
<SPAN id=3Dline-1179 class=3Danchor></SPAN>
<SPAN id=3Dline-1180 class=3Danchor></SPAN>4.18.   Popularimeter
<SPAN id=3Dline-1181 class=3Danchor></SPAN>
<SPAN id=3Dline-1182 class=3Danchor></SPAN>   The purpose of this frame =
is to specify how good an audio file is.
<SPAN id=3Dline-1183 class=3Danchor></SPAN>   Many interesting =
applications could be found to this frame such as a
<SPAN id=3Dline-1184 class=3Danchor></SPAN>   playlist that features =
better audiofiles more often than others or it
<SPAN id=3Dline-1185 class=3Danchor></SPAN>   could be used to profile a =
persons taste and find other 'good' files
<SPAN id=3Dline-1186 class=3Danchor></SPAN>   by comparing people's =
profiles. The frame is very simple. It contains
<SPAN id=3Dline-1187 class=3Danchor></SPAN>   the email address to the =
user, one rating byte and a four byte play
<SPAN id=3Dline-1188 class=3Danchor></SPAN>   counter, intended to be =
increased with one for every time the file is
<SPAN id=3Dline-1189 class=3Danchor></SPAN>   played. The email is a =
terminated string. The rating is 1-255 where
<SPAN id=3Dline-1190 class=3Danchor></SPAN>   1 is worst and 255 is =
best. 0 is unknown. If no personal counter is
<SPAN id=3Dline-1191 class=3Danchor></SPAN>   wanted it may be omitted.  =
When the counter reaches all one's, one
<SPAN id=3Dline-1192 class=3Danchor></SPAN>   byte is inserted in front =
of the counter thus making the counter
<SPAN id=3Dline-1193 class=3Danchor></SPAN>   eight bits bigger in the =
same away as the play counter ("CNT").
<SPAN id=3Dline-1194 class=3Danchor></SPAN>   There may be more than one =
"POP" frame in each tag, but only one with
<SPAN id=3Dline-1195 class=3Danchor></SPAN>   the same email address.
<SPAN id=3Dline-1196 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1197 class=3Danchor></SPAN>     Popularimeter   "POP"
<SPAN id=3Dline-1198 class=3Danchor></SPAN>     Frame size      $xx xx =
xx
<SPAN id=3Dline-1199 class=3Danchor></SPAN>     Email to user   =
&lt;textstring&gt; $00
<SPAN id=3Dline-1200 class=3Danchor></SPAN>     Rating          $xx
<SPAN id=3Dline-1201 class=3Danchor></SPAN>     Counter         $xx xx =
xx xx (xx ...)
<SPAN id=3Dline-1202 class=3Danchor></SPAN>
<SPAN id=3Dline-1203 class=3Danchor></SPAN>
<SPAN id=3Dline-1204 class=3Danchor></SPAN>4.19.   Recommended buffer =
size
<SPAN id=3Dline-1205 class=3Danchor></SPAN>
<SPAN id=3Dline-1206 class=3Danchor></SPAN>   Sometimes the server from =
which a audio file is streamed is aware of
<SPAN id=3Dline-1207 class=3Danchor></SPAN>   transmission or coding =
problems resulting in interruptions in the
<SPAN id=3Dline-1208 class=3Danchor></SPAN>   audio stream. In these =
cases, the size of the buffer can be
<SPAN id=3Dline-1209 class=3Danchor></SPAN>   recommended by the server =
using this frame. If the 'embedded info
<SPAN id=3Dline-1210 class=3Danchor></SPAN>   flag' is true (1) then =
this indicates that an ID3 tag with the
<SPAN id=3Dline-1211 class=3Danchor></SPAN>   maximum size described in =
'Buffer size' may occur in the audiostream.
<SPAN id=3Dline-1212 class=3Danchor></SPAN>   In such case the tag =
should reside between two MPEG [MPEG] frames, if
<SPAN id=3Dline-1213 class=3Danchor></SPAN>   the audio is MPEG encoded. =
If the position of the next tag is known,
<SPAN id=3Dline-1214 class=3Danchor></SPAN>   'offset to next tag' may =
be used. The offset is calculated from the
<SPAN id=3Dline-1215 class=3Danchor></SPAN>   end of tag in which this =
frame resides to the first byte of the header
<SPAN id=3Dline-1216 class=3Danchor></SPAN>   in the next. This field =
may be omitted. Embedded tags is currently not
<SPAN id=3Dline-1217 class=3Danchor></SPAN>   recommended since this =
could render unpredictable behaviour from
<SPAN id=3Dline-1218 class=3Danchor></SPAN>   present software/hardware. =
The 'Buffer size' should be kept to a
<SPAN id=3Dline-1219 class=3Danchor></SPAN>   minimum. There may only be =
one "BUF" frame in each tag.
<SPAN id=3Dline-1220 class=3Danchor></SPAN>
<SPAN id=3Dline-1221 class=3Danchor></SPAN>     Recommended buffer size  =
 "BUF"
<SPAN id=3Dline-1222 class=3Danchor></SPAN>     Frame size               =
 $xx xx xx
<SPAN id=3Dline-1223 class=3Danchor></SPAN>     Buffer size              =
 $xx xx xx
<SPAN id=3Dline-1224 class=3Danchor></SPAN>     Embedded info flag       =
 %0000000x
<SPAN id=3Dline-1225 class=3Danchor></SPAN>     Offset to next tag       =
 $xx xx xx xx
<SPAN id=3Dline-1226 class=3Danchor></SPAN>
<SPAN id=3Dline-1227 class=3Danchor></SPAN>
<SPAN id=3Dline-1228 class=3Danchor></SPAN>4.20.   Encrypted meta frame
<SPAN id=3Dline-1229 class=3Danchor></SPAN>
<SPAN id=3Dline-1230 class=3Danchor></SPAN>   This frame contains one or =
more encrypted frames. This enables
<SPAN id=3Dline-1231 class=3Danchor></SPAN>   protection of copyrighted =
information such as pictures and text, that
<SPAN id=3Dline-1232 class=3Danchor></SPAN>   people might want to pay =
extra for. Since standardisation of such an
<SPAN id=3Dline-1233 class=3Danchor></SPAN>   encryption scheme is =
beyond this document, all "CRM" frames begin with
<SPAN id=3Dline-1234 class=3Danchor></SPAN>   a terminated string with a =
URL [URL] containing an email address, or a
<SPAN id=3Dline-1235 class=3Danchor></SPAN>   link to a location where =
an email adress can be found, that belongs to
<SPAN id=3Dline-1236 class=3Danchor></SPAN>   the organisation =
responsible for this specific encrypted meta frame.
<SPAN id=3Dline-1237 class=3Danchor></SPAN>
<SPAN id=3Dline-1238 class=3Danchor></SPAN>   Questions regarding the =
encrypted frame should be sent to the
<SPAN id=3Dline-1239 class=3Danchor></SPAN>   indicated email address. =
If a $00 is found directly after the 'Frame
<SPAN id=3Dline-1240 class=3Danchor></SPAN>   size', the whole frame =
should be ignored, and preferably be removed.
<SPAN id=3Dline-1241 class=3Danchor></SPAN>   The 'Owner identifier' is =
then followed by a short content description
<SPAN id=3Dline-1242 class=3Danchor></SPAN>   and explanation as to why =
it's encrypted. After the
<SPAN id=3Dline-1243 class=3Danchor></SPAN>   'content/explanation' =
description, the actual encrypted block follows.
<SPAN id=3Dline-1244 class=3Danchor></SPAN>
<SPAN id=3Dline-1245 class=3Danchor></SPAN>   When an ID3v2 decoder =
encounters a "CRM" frame, it should send the
<SPAN id=3Dline-1246 class=3Danchor></SPAN>   datablock to the 'plugin' =
with the corresponding 'owner identifier'
<SPAN id=3Dline-1247 class=3Danchor></SPAN>   and expect to receive =
either a datablock with one or several ID3v2
<SPAN id=3Dline-1248 class=3Danchor></SPAN>   frames after each other or =
an error. There may be more than one "CRM"
<SPAN id=3Dline-1249 class=3Danchor></SPAN>   frames in a tag, but only =
one with the same 'owner identifier'.
<SPAN id=3Dline-1250 class=3Danchor></SPAN>
<SPAN id=3Dline-1251 class=3Danchor></SPAN>     Encrypted meta frame  =
"CRM"
<SPAN id=3Dline-1252 class=3Danchor></SPAN>     Frame size            =
$xx xx xx
<SPAN id=3Dline-1253 class=3Danchor></SPAN>     Owner identifier      =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1254 class=3Danchor></SPAN>     Content/explanation   =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1255 class=3Danchor></SPAN>     Encrypted datablock   =
&lt;binary data&gt;
<SPAN id=3Dline-1256 class=3Danchor></SPAN>
<SPAN id=3Dline-1257 class=3Danchor></SPAN>
<SPAN id=3Dline-1258 class=3Danchor></SPAN>4.21.   Audio encryption
<SPAN id=3Dline-1259 class=3Danchor></SPAN>
<SPAN id=3Dline-1260 class=3Danchor></SPAN>   This frame indicates if =
the actual audio stream is encrypted, and by
<SPAN id=3Dline-1261 class=3Danchor></SPAN>   whom. Since =
standardisation of such encrypion scheme is beyond this
<SPAN id=3Dline-1262 class=3Danchor></SPAN>   document, all "CRA" frames =
begin with a terminated string with a
<SPAN id=3Dline-1263 class=3Danchor></SPAN>   URL containing an email =
address, or a link to a location where an
<SPAN id=3Dline-1264 class=3Danchor></SPAN>   email address can be =
found, that belongs to the organisation
<SPAN id=3Dline-1265 class=3Danchor></SPAN>   responsible for this =
specific encrypted audio file. Questions
<SPAN id=3Dline-1266 class=3Danchor></SPAN>   regarding the encrypted =
audio should be sent to the email address
<SPAN id=3Dline-1267 class=3Danchor></SPAN>   specified. If a $00 is =
found directly after the 'Frame size' and the
<SPAN id=3Dline-1268 class=3Danchor></SPAN>   audiofile indeed is =
encrypted, the whole file may be considered
<SPAN id=3Dline-1269 class=3Danchor></SPAN>   useless.
<SPAN id=3Dline-1270 class=3Danchor></SPAN>
<SPAN id=3Dline-1271 class=3Danchor></SPAN>   After the 'Owner =
identifier', a pointer to an unencrypted part of the
<SPAN id=3Dline-1272 class=3Danchor></SPAN>   audio can be specified. =
The 'Preview start' and 'Preview length' is
<SPAN id=3Dline-1273 class=3Danchor></SPAN>   described in frames. If no =
part is unencrypted, these fields should be
<SPAN id=3Dline-1274 class=3Danchor></SPAN>   left zeroed. After the =
'preview length' field follows optionally a
<SPAN id=3Dline-1275 class=3Danchor></SPAN>   datablock required for =
decryption of the audio. There may be more than
<SPAN id=3Dline-1276 class=3Danchor></SPAN>   one "CRA" frames in a tag, =
but only one with the same 'Owner
<SPAN id=3Dline-1277 class=3Danchor></SPAN>   identifier'.
<SPAN id=3Dline-1278 class=3Danchor></SPAN>
<SPAN id=3Dline-1279 class=3Danchor></SPAN>     Audio encryption   "CRA"
<SPAN id=3Dline-1280 class=3Danchor></SPAN>     Frame size         $xx =
xx xx
<SPAN id=3Dline-1281 class=3Danchor></SPAN>     Owner identifier   =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1282 class=3Danchor></SPAN>     Preview start      $xx =
xx
<SPAN id=3Dline-1283 class=3Danchor></SPAN>     Preview length     $xx =
xx
<SPAN id=3Dline-1284 class=3Danchor></SPAN>     Encryption info    =
&lt;binary data&gt;
<SPAN id=3Dline-1285 class=3Danchor></SPAN>
<SPAN id=3Dline-1286 class=3Danchor></SPAN>
<SPAN id=3Dline-1287 class=3Danchor></SPAN>4.22.   Linked information
<SPAN id=3Dline-1288 class=3Danchor></SPAN>
<SPAN id=3Dline-1289 class=3Danchor></SPAN>   To keep space waste as low =
as possible this frame may be used to link
<SPAN id=3Dline-1290 class=3Danchor></SPAN>   information from another =
ID3v2 tag that might reside in another audio
<SPAN id=3Dline-1291 class=3Danchor></SPAN>   file or alone in a binary =
file. It is recommended that this method is
<SPAN id=3Dline-1292 class=3Danchor></SPAN>   only used when the files =
are stored on a CD-ROM or other circumstances
<SPAN id=3Dline-1293 class=3Danchor></SPAN>   when the risk of file =
seperation is low. The frame contains a frame
<SPAN id=3Dline-1294 class=3Danchor></SPAN>   identifier, which is the =
frame that should be linked into this tag, a
<SPAN id=3Dline-1295 class=3Danchor></SPAN>   URL [URL] field, where a =
reference to the file where the frame is
<SPAN id=3Dline-1296 class=3Danchor></SPAN>   given, and additional ID =
data, if needed. Data should be retrieved
<SPAN id=3Dline-1297 class=3Danchor></SPAN>   from the first tag found =
in the file to which this link points. There
<SPAN id=3Dline-1298 class=3Danchor></SPAN>   may be more than one "LNK" =
frame in a tag, but only one with the same
<SPAN id=3Dline-1299 class=3Danchor></SPAN>   contents. A linked frame =
is to be considered as part of the tag and
<SPAN id=3Dline-1300 class=3Danchor></SPAN>   has the same restrictions =
as if it was a physical part of the tag
<SPAN id=3Dline-1301 class=3Danchor></SPAN>   (i.e. only one "REV" frame =
allowed, whether it's linked or not).
<SPAN id=3Dline-1302 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1303 class=3Danchor></SPAN>     Linked information  =
"LNK"
<SPAN id=3Dline-1304 class=3Danchor></SPAN>     Frame size          $xx =
xx xx
<SPAN id=3Dline-1305 class=3Danchor></SPAN>     Frame identifier    $xx =
xx xx
<SPAN id=3Dline-1306 class=3Danchor></SPAN>     URL                 =
&lt;textstring&gt; $00 (00)
<SPAN id=3Dline-1307 class=3Danchor></SPAN>     Additional ID data  =
&lt;textstring(s)&gt;
<SPAN id=3Dline-1308 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1309 class=3Danchor></SPAN>   Frames that may be linked =
and need no additional data are "IPL",
<SPAN id=3Dline-1310 class=3Danchor></SPAN>   "MCI", "ETC", "LLT", =
"STC", "RVA", "EQU", "REV", "BUF", the text
<SPAN id=3Dline-1311 class=3Danchor></SPAN>   information frames and the =
URL link frames.
<SPAN id=3Dline-1312 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1313 class=3Danchor></SPAN>   The "TXX", "PIC", "GEO", =
"CRM" and "CRA" frames may be linked with the
<SPAN id=3Dline-1314 class=3Danchor></SPAN>   content descriptor as =
additional ID data.
<SPAN id=3Dline-1315 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1316 class=3Danchor></SPAN>   The "COM", "SLT" and "ULT" =
frames may be linked with three bytes of
<SPAN id=3Dline-1317 class=3Danchor></SPAN>   language descriptor =
directly followed by a content descriptor as
<SPAN id=3Dline-1318 class=3Danchor></SPAN>   additional ID data.
<SPAN id=3Dline-1319 class=3Danchor></SPAN>
<SPAN id=3Dline-1320 class=3Danchor></SPAN>
<SPAN id=3Dline-1321 class=3Danchor></SPAN>5.   The 'unsynchronisation =
scheme'
<SPAN id=3Dline-1322 class=3Danchor></SPAN>
<SPAN id=3Dline-1323 class=3Danchor></SPAN>   The only purpose of the =
'unsychronisation scheme' is to make the ID3v2
<SPAN id=3Dline-1324 class=3Danchor></SPAN>   tag as compatible as =
possible with existing software. There is no use
<SPAN id=3Dline-1325 class=3Danchor></SPAN>   in 'unsynchronising' tags =
if the file is only to be processed by new
<SPAN id=3Dline-1326 class=3Danchor></SPAN>   software. =
Unsynchronisation may only be made with MPEG 2 layer I, II
<SPAN id=3Dline-1327 class=3Danchor></SPAN>   and III and MPEG 2.5 =
files.
<SPAN id=3Dline-1328 class=3Danchor></SPAN>
<SPAN id=3Dline-1329 class=3Danchor></SPAN>   Whenever a false =
synchronisation is found within the tag, one zeroed
<SPAN id=3Dline-1330 class=3Danchor></SPAN>   byte is inserted after the =
first false synchronisation byte. The
<SPAN id=3Dline-1331 class=3Danchor></SPAN>   format of a correct sync =
that should be altered by ID3 encoders is as
<SPAN id=3Dline-1332 class=3Danchor></SPAN>   follows:
<SPAN id=3Dline-1333 class=3Danchor></SPAN>
<SPAN id=3Dline-1334 class=3Danchor></SPAN>         %11111111 111xxxxx
<SPAN id=3Dline-1335 class=3Danchor></SPAN>
<SPAN id=3Dline-1336 class=3Danchor></SPAN>   And should be replaced =
with:
<SPAN id=3Dline-1337 class=3Danchor></SPAN>
<SPAN id=3Dline-1338 class=3Danchor></SPAN>         %11111111 00000000 =
111xxxxx
<SPAN id=3Dline-1339 class=3Danchor></SPAN>
<SPAN id=3Dline-1340 class=3Danchor></SPAN>   This has the side effect =
that all $FF 00 combinations have to be
<SPAN id=3Dline-1341 class=3Danchor></SPAN>   altered, so they won't be =
affected by the decoding process. Therefore
<SPAN id=3Dline-1342 class=3Danchor></SPAN>   all the $FF 00 =
combinations have to be replaced with the $FF 00 00
<SPAN id=3Dline-1343 class=3Danchor></SPAN>   combination during the =
unsynchonisation.
<SPAN id=3Dline-1344 class=3Danchor></SPAN>
<SPAN id=3Dline-1345 class=3Danchor></SPAN>   To indicate usage of the =
unsynchronisation, the first bit in 'ID3
<SPAN id=3Dline-1346 class=3Danchor></SPAN>   flags' should be set. This =
bit should only be set if the tag
<SPAN id=3Dline-1347 class=3Danchor></SPAN>   contained a, now =
corrected, false synchronisation. The bit should
<SPAN id=3Dline-1348 class=3Danchor></SPAN>   only be clear if the tag =
does not contain any false synchronisations.
<SPAN id=3Dline-1349 class=3Danchor></SPAN>  =20
<SPAN id=3Dline-1350 class=3Danchor></SPAN>   Do bear in mind, that if a =
compression scheme is used by the encoder,
<SPAN id=3Dline-1351 class=3Danchor></SPAN>   the unsyncronisation =
scheme should be applied *afterwards*. When
<SPAN id=3Dline-1352 class=3Danchor></SPAN>   decoding a compressed, =
'unsyncronised' file, the 'unsyncronisation
<SPAN id=3Dline-1353 class=3Danchor></SPAN>   scheme' should be parsed =
first, compression afterwards.
<SPAN id=3Dline-1354 class=3Danchor></SPAN>
<SPAN id=3Dline-1355 class=3Danchor></SPAN>
<SPAN id=3Dline-1356 class=3Danchor></SPAN>6.   Copyright
<SPAN id=3Dline-1357 class=3Danchor></SPAN>
<SPAN id=3Dline-1358 class=3Danchor></SPAN>   Copyright (C) Martin =
Nilsson 1998. All Rights Reserved.
<SPAN id=3Dline-1359 class=3Danchor></SPAN>
<SPAN id=3Dline-1360 class=3Danchor></SPAN>   This document and =
translations of it may be copied and furnished to
<SPAN id=3Dline-1361 class=3Danchor></SPAN>   others, and derivative =
works that comment on or otherwise explain it
<SPAN id=3Dline-1362 class=3Danchor></SPAN>   or assist in its =
implementation may be prepared, copied, published
<SPAN id=3Dline-1363 class=3Danchor></SPAN>   and distributed, in whole =
or in part, without restriction of any
<SPAN id=3Dline-1364 class=3Danchor></SPAN>   kind, provided that a =
reference to this document is included on all
<SPAN id=3Dline-1365 class=3Danchor></SPAN>   such copies and derivative =
works. However, this document itself may
<SPAN id=3Dline-1366 class=3Danchor></SPAN>   not be modified in any way =
and reissued as the original document.
<SPAN id=3Dline-1367 class=3Danchor></SPAN>
<SPAN id=3Dline-1368 class=3Danchor></SPAN>   The limited permissions =
granted above are perpetual and will not be
<SPAN id=3Dline-1369 class=3Danchor></SPAN>   revoked.
<SPAN id=3Dline-1370 class=3Danchor></SPAN>
<SPAN id=3Dline-1371 class=3Danchor></SPAN>   This document and the =
information contained herein is provided on an
<SPAN id=3Dline-1372 class=3Danchor></SPAN>   "AS IS" basis and THE =
AUTHORS DISCLAIMS ALL WARRANTIES, EXPRESS OR
<SPAN id=3Dline-1373 class=3Danchor></SPAN>   IMPLIED, INCLUDING BUT NOT =
LIMITED TO ANY WARRANTY THAT THE USE OF THE
<SPAN id=3Dline-1374 class=3Danchor></SPAN>   INFORMATION HEREIN WILL =
NOT INFRINGE ANY RIGHTS OR ANY IMPLIED
<SPAN id=3Dline-1375 class=3Danchor></SPAN>   WARRANTIES OF =
MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
<SPAN id=3Dline-1376 class=3Danchor></SPAN>
<SPAN id=3Dline-1377 class=3Danchor></SPAN>
<SPAN id=3Dline-1378 class=3Danchor></SPAN>7.   References
<SPAN id=3Dline-1379 class=3Danchor></SPAN>
<SPAN id=3Dline-1380 class=3Danchor></SPAN>   [CDDB] Compact Disc Data =
Base
<SPAN id=3Dline-1381 class=3Danchor></SPAN>
<SPAN id=3Dline-1382 class=3Danchor></SPAN>      =
&lt;url:http://www.cddb.com&gt;
<SPAN id=3Dline-1383 class=3Danchor></SPAN>
<SPAN id=3Dline-1384 class=3Danchor></SPAN>   [ISO-639-2] ISO/FDIS =
639-2.
<SPAN id=3Dline-1385 class=3Danchor></SPAN>   Codes for the =
representation of names of languages, Part 2: Alpha-3
<SPAN id=3Dline-1386 class=3Danchor></SPAN>   code. Technical committee =
/ subcommittee: TC 37 / SC 2
<SPAN id=3Dline-1387 class=3Danchor></SPAN>
<SPAN id=3Dline-1388 class=3Danchor></SPAN>   [ISO-8859-1] ISO/IEC DIS =
8859-1.
<SPAN id=3Dline-1389 class=3Danchor></SPAN>   8-bit single-byte coded =
graphic character sets, Part 1: Latin
<SPAN id=3Dline-1390 class=3Danchor></SPAN>   alphabet No. 1. Technical =
committee / subcommittee: JTC 1 / SC 2
<SPAN id=3Dline-1391 class=3Danchor></SPAN>
<SPAN id=3Dline-1392 class=3Danchor></SPAN>   [ISRC] ISO 3901:1986
<SPAN id=3Dline-1393 class=3Danchor></SPAN>   International Standard =
Recording Code (ISRC).
<SPAN id=3Dline-1394 class=3Danchor></SPAN>   Technical committee / =
subcommittee: TC 46 / SC 9
<SPAN id=3Dline-1395 class=3Danchor></SPAN>
<SPAN id=3Dline-1396 class=3Danchor></SPAN>   [JFIF] JPEG File =
Interchange Format, version 1.02
<SPAN id=3Dline-1397 class=3Danchor></SPAN>
<SPAN id=3Dline-1398 class=3Danchor></SPAN>      =
&lt;url:http://www.w3.org/Graphics/JPEG/jfif.txt&gt;
<SPAN id=3Dline-1399 class=3Danchor></SPAN>     =20
<SPAN id=3Dline-1400 class=3Danchor></SPAN>   [MIME] Freed, N.  and N. =
Borenstein,  "Multipurpose Internet Mail
<SPAN id=3Dline-1401 class=3Danchor></SPAN>   Extensions (MIME) Part =
One: Format of Internet Message Bodies",
<SPAN id=3Dline-1402 class=3Danchor></SPAN>   RFC 2045, November 1996.
<SPAN id=3Dline-1403 class=3Danchor></SPAN>=20
<SPAN id=3Dline-1404 class=3Danchor></SPAN>      =
&lt;url:ftp://ftp.isi.edu/in-notes/rfc2045.txt&gt;
<SPAN id=3Dline-1405 class=3Danchor></SPAN>     =20
<SPAN id=3Dline-1406 class=3Danchor></SPAN>   [MPEG] ISO/IEC =
11172-3:1993.
<SPAN id=3Dline-1407 class=3Danchor></SPAN>   Coding of moving pictures =
and associated audio for digital storage
<SPAN id=3Dline-1408 class=3Danchor></SPAN>   media at up to about 1,5 =
Mbit/s, Part 3: Audio.
<SPAN id=3Dline-1409 class=3Danchor></SPAN>   Technical committee / =
subcommittee: JTC 1 / SC 29
<SPAN id=3Dline-1410 class=3Danchor></SPAN>   and  =20
<SPAN id=3Dline-1411 class=3Danchor></SPAN>   ISO/IEC 13818-3:1995
<SPAN id=3Dline-1412 class=3Danchor></SPAN>   Generic coding of moving =
pictures and associated audio information,
<SPAN id=3Dline-1413 class=3Danchor></SPAN>   Part 3: Audio.
<SPAN id=3Dline-1414 class=3Danchor></SPAN>   Technical committee / =
subcommittee: JTC 1 / SC 29
<SPAN id=3Dline-1415 class=3Danchor></SPAN>   and  =20
<SPAN id=3Dline-1416 class=3Danchor></SPAN>   ISO/IEC DIS 13818-3
<SPAN id=3Dline-1417 class=3Danchor></SPAN>   Generic coding of moving =
pictures and associated audio information,
<SPAN id=3Dline-1418 class=3Danchor></SPAN>   Part 3: Audio (Revision of =
ISO/IEC 13818-3:1995)
<SPAN id=3Dline-1419 class=3Danchor></SPAN>
<SPAN id=3Dline-1420 class=3Danchor></SPAN>
<SPAN id=3Dline-1421 class=3Danchor></SPAN>   [PNG] Portable Network =
Graphics, version 1.0
<SPAN id=3Dline-1422 class=3Danchor></SPAN>
<SPAN id=3Dline-1423 class=3Danchor></SPAN>      =
&lt;url:http://www.w3.org/TR/REC-png-multi.html&gt;
<SPAN id=3Dline-1424 class=3Danchor></SPAN>
<SPAN id=3Dline-1425 class=3Danchor></SPAN>   [UNICODE] ISO/IEC =
10646-1:1993.
<SPAN id=3Dline-1426 class=3Danchor></SPAN>   Universal Multiple-Octet =
Coded Character Set (UCS), Part 1:
<SPAN id=3Dline-1427 class=3Danchor></SPAN>   Architecture and Basic =
Multilingual Plane. Technical committee
<SPAN id=3Dline-1428 class=3Danchor></SPAN>   / subcommittee: JTC 1 / SC =
2
<SPAN id=3Dline-1429 class=3Danchor></SPAN>
<SPAN id=3Dline-1430 class=3Danchor></SPAN>      =
&lt;url:http://www.unicode.org&gt;
<SPAN id=3Dline-1431 class=3Danchor></SPAN>
<SPAN id=3Dline-1432 class=3Danchor></SPAN>   [URL] T. Berners-Lee, L. =
Masinter &amp; M. McCahill, "Uniform Resource
<SPAN id=3Dline-1433 class=3Danchor></SPAN>   Locators (URL).", RFC =
1738, December 1994.
<SPAN id=3Dline-1434 class=3Danchor></SPAN>
<SPAN id=3Dline-1435 class=3Danchor></SPAN>      =
&lt;url:ftp://ftp.isi.edu/in-notes/rfc1738.txt&gt;
<SPAN id=3Dline-1436 class=3Danchor></SPAN>
<SPAN id=3Dline-1437 class=3Danchor></SPAN>
<SPAN id=3Dline-1438 class=3Danchor></SPAN>8.   Appendix
<SPAN id=3Dline-1439 class=3Danchor></SPAN>
<SPAN id=3Dline-1440 class=3Danchor></SPAN>
<SPAN id=3Dline-1441 class=3Danchor></SPAN>A.   Appendix A - ID3-Tag =
Specification V1.1
<SPAN id=3Dline-1442 class=3Danchor></SPAN>
<SPAN id=3Dline-1443 class=3Danchor></SPAN>   ID3-Tag Specification V1.1 =
(12 dec 1997) by Michael Mutschler
<SPAN id=3Dline-1444 class=3Danchor></SPAN>   =
&lt;amiga2@info2.rus.uni-stuttgart.de&gt;, edited for space and clarity
<SPAN id=3Dline-1445 class=3Danchor></SPAN>   reasons.
<SPAN id=3Dline-1446 class=3Danchor></SPAN>
<SPAN id=3Dline-1447 class=3Danchor></SPAN>
<SPAN id=3Dline-1448 class=3Danchor></SPAN>A.1.   Overview
<SPAN id=3Dline-1449 class=3Danchor></SPAN>
<SPAN id=3Dline-1450 class=3Danchor></SPAN>
<SPAN id=3Dline-1451 class=3Danchor></SPAN>   The ID3-Tag is an =
information field for MPEG Layer 3 audio files.
<SPAN id=3Dline-1452 class=3Danchor></SPAN>   Since a standalone MP3 =
doesn't provide a method of storing other
<SPAN id=3Dline-1453 class=3Danchor></SPAN>   information than those =
directly needed for replay reasons, the
<SPAN id=3Dline-1454 class=3Danchor></SPAN>   ID3-tag was invented by =
Eric Kemp in 1996.
<SPAN id=3Dline-1455 class=3Danchor></SPAN>
<SPAN id=3Dline-1456 class=3Danchor></SPAN>   A revision from ID3v1 to =
ID3v1.1 was made by Michael Mutschler to
<SPAN id=3Dline-1457 class=3Danchor></SPAN>   support track number =
information is described in A.4.
<SPAN id=3Dline-1458 class=3Danchor></SPAN>
<SPAN id=3Dline-1459 class=3Danchor></SPAN>
<SPAN id=3Dline-1460 class=3Danchor></SPAN>A.2.   ID3v1 Implementation
<SPAN id=3Dline-1461 class=3Danchor></SPAN>
<SPAN id=3Dline-1462 class=3Danchor></SPAN>   The Information is stored =
in the last 128 bytes of an MP3. The Tag
<SPAN id=3Dline-1463 class=3Danchor></SPAN>   has got the following =
fields, and the offsets given here, are from
<SPAN id=3Dline-1464 class=3Danchor></SPAN>   0-127.
<SPAN id=3Dline-1465 class=3Danchor></SPAN>
<SPAN id=3Dline-1466 class=3Danchor></SPAN>     Field      Length    =
Offsets
<SPAN id=3Dline-1467 class=3Danchor></SPAN>     Tag        3           =
0-2
<SPAN id=3Dline-1468 class=3Danchor></SPAN>     Songname   30          =
3-32
<SPAN id=3Dline-1469 class=3Danchor></SPAN>     Artist     30         =
33-62
<SPAN id=3Dline-1470 class=3Danchor></SPAN>     Album      30         =
63-92
<SPAN id=3Dline-1471 class=3Danchor></SPAN>     Year       4          =
93-96
<SPAN id=3Dline-1472 class=3Danchor></SPAN>     Comment    30         =
97-126
<SPAN id=3Dline-1473 class=3Danchor></SPAN>     Genre      1           =
127
<SPAN id=3Dline-1474 class=3Danchor></SPAN>
<SPAN id=3Dline-1475 class=3Danchor></SPAN>
<SPAN id=3Dline-1476 class=3Danchor></SPAN>   The string-fields contain =
ASCII-data, coded in ISO-Latin 1 codepage.
<SPAN id=3Dline-1477 class=3Danchor></SPAN>   Strings which are smaller =
than the field length are padded with zero-
<SPAN id=3Dline-1478 class=3Danchor></SPAN>   bytes.
<SPAN id=3Dline-1479 class=3Danchor></SPAN>
<SPAN id=3Dline-1480 class=3Danchor></SPAN>     Tag: The tag is valid if =
this field contains the string "TAG". This
<SPAN id=3Dline-1481 class=3Danchor></SPAN>        has to be uppercase!
<SPAN id=3Dline-1482 class=3Danchor></SPAN>
<SPAN id=3Dline-1483 class=3Danchor></SPAN>     Songname: This field =
contains the title of the MP3 (string as
<SPAN id=3Dline-1484 class=3Danchor></SPAN>        above).
<SPAN id=3Dline-1485 class=3Danchor></SPAN>
<SPAN id=3Dline-1486 class=3Danchor></SPAN>     Artist: This field =
contains the artist of the MP3 (string as above).
<SPAN id=3Dline-1487 class=3Danchor></SPAN>
<SPAN id=3Dline-1488 class=3Danchor></SPAN>     Album: this field =
contains the album where the MP3 comes from
<SPAN id=3Dline-1489 class=3Danchor></SPAN>        (string as above).
<SPAN id=3Dline-1490 class=3Danchor></SPAN>
<SPAN id=3Dline-1491 class=3Danchor></SPAN>     Year: this field =
contains the year when this song has originally
<SPAN id=3Dline-1492 class=3Danchor></SPAN>        been released (string =
as above).
<SPAN id=3Dline-1493 class=3Danchor></SPAN>
<SPAN id=3Dline-1494 class=3Danchor></SPAN>     Comment: this field =
contains a comment for the MP3 (string as
<SPAN id=3Dline-1495 class=3Danchor></SPAN>        above). Revision to =
this field has been made in ID3v1.1. See
<SPAN id=3Dline-1496 class=3Danchor></SPAN>        A.4.
<SPAN id=3Dline-1497 class=3Danchor></SPAN>
<SPAN id=3Dline-1498 class=3Danchor></SPAN>     Genre: this byte =
contains the offset of a genre in a predefined
<SPAN id=3Dline-1499 class=3Danchor></SPAN>        list the byte is =
treated as an unsigned byte. The offset is
<SPAN id=3Dline-1500 class=3Danchor></SPAN>        starting from 0. See =
A.3.
<SPAN id=3Dline-1501 class=3Danchor></SPAN>
<SPAN id=3Dline-1502 class=3Danchor></SPAN>
<SPAN id=3Dline-1503 class=3Danchor></SPAN>A.3.   Genre List
<SPAN id=3Dline-1504 class=3Danchor></SPAN>
<SPAN id=3Dline-1505 class=3Danchor></SPAN>   The following genres is =
defined in ID3v1=20
<SPAN id=3Dline-1506 class=3Danchor></SPAN>
<SPAN id=3Dline-1507 class=3Danchor></SPAN>      0.Blues
<SPAN id=3Dline-1508 class=3Danchor></SPAN>      1.Classic Rock
<SPAN id=3Dline-1509 class=3Danchor></SPAN>      2.Country
<SPAN id=3Dline-1510 class=3Danchor></SPAN>      3.Dance
<SPAN id=3Dline-1511 class=3Danchor></SPAN>      4.Disco
<SPAN id=3Dline-1512 class=3Danchor></SPAN>      5.Funk
<SPAN id=3Dline-1513 class=3Danchor></SPAN>      6.Grunge
<SPAN id=3Dline-1514 class=3Danchor></SPAN>      7.Hip-Hop
<SPAN id=3Dline-1515 class=3Danchor></SPAN>      8.Jazz
<SPAN id=3Dline-1516 class=3Danchor></SPAN>      9.Metal
<SPAN id=3Dline-1517 class=3Danchor></SPAN>     10.New Age
<SPAN id=3Dline-1518 class=3Danchor></SPAN>     11.Oldies
<SPAN id=3Dline-1519 class=3Danchor></SPAN>     12.Other
<SPAN id=3Dline-1520 class=3Danchor></SPAN>     13.Pop
<SPAN id=3Dline-1521 class=3Danchor></SPAN>     14.R&amp;B
<SPAN id=3Dline-1522 class=3Danchor></SPAN>     15.Rap
<SPAN id=3Dline-1523 class=3Danchor></SPAN>     16.Reggae
<SPAN id=3Dline-1524 class=3Danchor></SPAN>     17.Rock
<SPAN id=3Dline-1525 class=3Danchor></SPAN>     18.Techno
<SPAN id=3Dline-1526 class=3Danchor></SPAN>     19.Industrial
<SPAN id=3Dline-1527 class=3Danchor></SPAN>     20.Alternative
<SPAN id=3Dline-1528 class=3Danchor></SPAN>     21.Ska
<SPAN id=3Dline-1529 class=3Danchor></SPAN>     22.Death Metal
<SPAN id=3Dline-1530 class=3Danchor></SPAN>     23.Pranks
<SPAN id=3Dline-1531 class=3Danchor></SPAN>     24.Soundtrack
<SPAN id=3Dline-1532 class=3Danchor></SPAN>     25.Euro-Techno
<SPAN id=3Dline-1533 class=3Danchor></SPAN>     26.Ambient
<SPAN id=3Dline-1534 class=3Danchor></SPAN>     27.Trip-Hop
<SPAN id=3Dline-1535 class=3Danchor></SPAN>     28.Vocal
<SPAN id=3Dline-1536 class=3Danchor></SPAN>     29.Jazz+Funk
<SPAN id=3Dline-1537 class=3Danchor></SPAN>     30.Fusion
<SPAN id=3Dline-1538 class=3Danchor></SPAN>     31.Trance
<SPAN id=3Dline-1539 class=3Danchor></SPAN>     32.Classical
<SPAN id=3Dline-1540 class=3Danchor></SPAN>     33.Instrumental
<SPAN id=3Dline-1541 class=3Danchor></SPAN>     34.Acid
<SPAN id=3Dline-1542 class=3Danchor></SPAN>     35.House
<SPAN id=3Dline-1543 class=3Danchor></SPAN>     36.Game
<SPAN id=3Dline-1544 class=3Danchor></SPAN>     37.Sound Clip
<SPAN id=3Dline-1545 class=3Danchor></SPAN>     38.Gospel
<SPAN id=3Dline-1546 class=3Danchor></SPAN>     39.Noise
<SPAN id=3Dline-1547 class=3Danchor></SPAN>     40.AlternRock
<SPAN id=3Dline-1548 class=3Danchor></SPAN>     41.Bass
<SPAN id=3Dline-1549 class=3Danchor></SPAN>     42.Soul
<SPAN id=3Dline-1550 class=3Danchor></SPAN>     43.Punk
<SPAN id=3Dline-1551 class=3Danchor></SPAN>     44.Space
<SPAN id=3Dline-1552 class=3Danchor></SPAN>     45.Meditative
<SPAN id=3Dline-1553 class=3Danchor></SPAN>     46.Instrumental Pop
<SPAN id=3Dline-1554 class=3Danchor></SPAN>     47.Instrumental Rock
<SPAN id=3Dline-1555 class=3Danchor></SPAN>     48.Ethnic
<SPAN id=3Dline-1556 class=3Danchor></SPAN>     49.Gothic
<SPAN id=3Dline-1557 class=3Danchor></SPAN>     50.Darkwave
<SPAN id=3Dline-1558 class=3Danchor></SPAN>     51.Techno-Industrial
<SPAN id=3Dline-1559 class=3Danchor></SPAN>     52.Electronic
<SPAN id=3Dline-1560 class=3Danchor></SPAN>     53.Pop-Folk
<SPAN id=3Dline-1561 class=3Danchor></SPAN>     54.Eurodance
<SPAN id=3Dline-1562 class=3Danchor></SPAN>     55.Dream
<SPAN id=3Dline-1563 class=3Danchor></SPAN>     56.Southern Rock
<SPAN id=3Dline-1564 class=3Danchor></SPAN>     57.Comedy
<SPAN id=3Dline-1565 class=3Danchor></SPAN>     58.Cult
<SPAN id=3Dline-1566 class=3Danchor></SPAN>     59.Gangsta
<SPAN id=3Dline-1567 class=3Danchor></SPAN>     60.Top 40
<SPAN id=3Dline-1568 class=3Danchor></SPAN>     61.Christian Rap
<SPAN id=3Dline-1569 class=3Danchor></SPAN>     62.Pop/Funk
<SPAN id=3Dline-1570 class=3Danchor></SPAN>     63.Jungle
<SPAN id=3Dline-1571 class=3Danchor></SPAN>     64.Native American
<SPAN id=3Dline-1572 class=3Danchor></SPAN>     65.Cabaret
<SPAN id=3Dline-1573 class=3Danchor></SPAN>     66.New Wave
<SPAN id=3Dline-1574 class=3Danchor></SPAN>     67.Psychadelic
<SPAN id=3Dline-1575 class=3Danchor></SPAN>     68.Rave
<SPAN id=3Dline-1576 class=3Danchor></SPAN>     69.Showtunes
<SPAN id=3Dline-1577 class=3Danchor></SPAN>     70.Trailer
<SPAN id=3Dline-1578 class=3Danchor></SPAN>     71.Lo-Fi
<SPAN id=3Dline-1579 class=3Danchor></SPAN>     72.Tribal
<SPAN id=3Dline-1580 class=3Danchor></SPAN>     73.Acid Punk
<SPAN id=3Dline-1581 class=3Danchor></SPAN>     74.Acid Jazz
<SPAN id=3Dline-1582 class=3Danchor></SPAN>     75.Polka
<SPAN id=3Dline-1583 class=3Danchor></SPAN>     76.Retro
<SPAN id=3Dline-1584 class=3Danchor></SPAN>     77.Musical
<SPAN id=3Dline-1585 class=3Danchor></SPAN>     78.Rock &amp; Roll
<SPAN id=3Dline-1586 class=3Danchor></SPAN>     79.Hard Rock
<SPAN id=3Dline-1587 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-1588 class=3Danchor></SPAN>   The following genres are =
Winamp extensions
<SPAN id=3Dline-1589 class=3Danchor></SPAN>    =20
<SPAN id=3Dline-1590 class=3Danchor></SPAN>     80.Folk
<SPAN id=3Dline-1591 class=3Danchor></SPAN>     81.Folk-Rock
<SPAN id=3Dline-1592 class=3Danchor></SPAN>     82.National Folk
<SPAN id=3Dline-1593 class=3Danchor></SPAN>     83.Swing
<SPAN id=3Dline-1594 class=3Danchor></SPAN>     84.Fast Fusion
<SPAN id=3Dline-1595 class=3Danchor></SPAN>     85.Bebob
<SPAN id=3Dline-1596 class=3Danchor></SPAN>     86.Latin
<SPAN id=3Dline-1597 class=3Danchor></SPAN>     87.Revival
<SPAN id=3Dline-1598 class=3Danchor></SPAN>     88.Celtic
<SPAN id=3Dline-1599 class=3Danchor></SPAN>     89.Bluegrass
<SPAN id=3Dline-1600 class=3Danchor></SPAN>     90.Avantgarde
<SPAN id=3Dline-1601 class=3Danchor></SPAN>     91.Gothic Rock
<SPAN id=3Dline-1602 class=3Danchor></SPAN>     92.Progressive Rock
<SPAN id=3Dline-1603 class=3Danchor></SPAN>     93.Psychedelic Rock
<SPAN id=3Dline-1604 class=3Danchor></SPAN>     94.Symphonic Rock
<SPAN id=3Dline-1605 class=3Danchor></SPAN>     95.Slow Rock
<SPAN id=3Dline-1606 class=3Danchor></SPAN>     96.Big Band
<SPAN id=3Dline-1607 class=3Danchor></SPAN>     97.Chorus
<SPAN id=3Dline-1608 class=3Danchor></SPAN>     98.Easy Listening
<SPAN id=3Dline-1609 class=3Danchor></SPAN>     99.Acoustic
<SPAN id=3Dline-1610 class=3Danchor></SPAN>    100.Humour
<SPAN id=3Dline-1611 class=3Danchor></SPAN>    101.Speech
<SPAN id=3Dline-1612 class=3Danchor></SPAN>    102.Chanson
<SPAN id=3Dline-1613 class=3Danchor></SPAN>    103.Opera
<SPAN id=3Dline-1614 class=3Danchor></SPAN>    104.Chamber Music
<SPAN id=3Dline-1615 class=3Danchor></SPAN>    105.Sonata
<SPAN id=3Dline-1616 class=3Danchor></SPAN>    106.Symphony
<SPAN id=3Dline-1617 class=3Danchor></SPAN>    107.Booty Bass
<SPAN id=3Dline-1618 class=3Danchor></SPAN>    108.Primus
<SPAN id=3Dline-1619 class=3Danchor></SPAN>    109.Porn Groove
<SPAN id=3Dline-1620 class=3Danchor></SPAN>    110.Satire
<SPAN id=3Dline-1621 class=3Danchor></SPAN>    111.Slow Jam
<SPAN id=3Dline-1622 class=3Danchor></SPAN>    112.Club
<SPAN id=3Dline-1623 class=3Danchor></SPAN>    113.Tango
<SPAN id=3Dline-1624 class=3Danchor></SPAN>    114.Samba
<SPAN id=3Dline-1625 class=3Danchor></SPAN>    115.Folklore
<SPAN id=3Dline-1626 class=3Danchor></SPAN>    116.Ballad
<SPAN id=3Dline-1627 class=3Danchor></SPAN>    117.Power Ballad
<SPAN id=3Dline-1628 class=3Danchor></SPAN>    118.Rhythmic Soul
<SPAN id=3Dline-1629 class=3Danchor></SPAN>    119.Freestyle
<SPAN id=3Dline-1630 class=3Danchor></SPAN>    120.Duet
<SPAN id=3Dline-1631 class=3Danchor></SPAN>    121.Punk Rock
<SPAN id=3Dline-1632 class=3Danchor></SPAN>    122.Drum Solo
<SPAN id=3Dline-1633 class=3Danchor></SPAN>    123.A capella
<SPAN id=3Dline-1634 class=3Danchor></SPAN>    124.Euro-House
<SPAN id=3Dline-1635 class=3Danchor></SPAN>    125.Dance Hall
<SPAN id=3Dline-1636 class=3Danchor></SPAN>
<SPAN id=3Dline-1637 class=3Danchor></SPAN>
<SPAN id=3Dline-1638 class=3Danchor></SPAN>A.4.   Track addition - =
ID3v1.1
<SPAN id=3Dline-1639 class=3Danchor></SPAN>
<SPAN id=3Dline-1640 class=3Danchor></SPAN>   In ID3v1.1, Michael =
Mutschler revised the specification of the
<SPAN id=3Dline-1641 class=3Danchor></SPAN>   comment field in order to =
implement the track number. The new format
<SPAN id=3Dline-1642 class=3Danchor></SPAN>   of the comment field is a =
28 character string followed by a mandatory
<SPAN id=3Dline-1643 class=3Danchor></SPAN>   null ($00) character and =
the original album tracknumber stored as an
<SPAN id=3Dline-1644 class=3Danchor></SPAN>   unsigned byte-size =
integer. In such cases where the 29th byte is not
<SPAN id=3Dline-1645 class=3Danchor></SPAN>   the null character or when =
the 30th is a null character, the
<SPAN id=3Dline-1646 class=3Danchor></SPAN>   tracknumber is to be =
considered undefined.
<SPAN id=3Dline-1647 class=3Danchor></SPAN>
<SPAN id=3Dline-1648 class=3Danchor></SPAN>
<SPAN id=3Dline-1649 class=3Danchor></SPAN>9.   Author's Address
<SPAN id=3Dline-1650 class=3Danchor></SPAN>
<SPAN id=3Dline-1651 class=3Danchor></SPAN>   Martin Nilsson
<SPAN id=3Dline-1652 class=3Danchor></SPAN>   Rydsv=EF=BF=BDgen 246 C. =
30
<SPAN id=3Dline-1653 class=3Danchor></SPAN>   S-584 34 Link=EF=BF=BDping
<SPAN id=3Dline-1654 class=3Danchor></SPAN>   Sweden
<SPAN id=3Dline-1655 class=3Danchor></SPAN>
<SPAN id=3Dline-1656 class=3Danchor></SPAN>   Email: nilsson at id3.org
<SPAN id=3Dline-1657 class=3Danchor></SPAN>
<SPAN id=3Dline-1658 class=3Danchor></SPAN>   Co-authors:
<SPAN id=3Dline-1659 class=3Danchor></SPAN>
<SPAN id=3Dline-1660 class=3Danchor></SPAN>   Johan Sundstr=EF=BF=BDm   =
Email: johan at id3.org
<SPAN id=3Dline-1661 class=3Danchor></SPAN></PRE><SPAN id=3Dline-1662=20
class=3Danchor></SPAN><SPAN id=3Dbottom class=3Danchor></SPAN></DIV>
<DIV id=3Dpagebottom></DIV>
<P dir=3Dltr id=3Dpageinfo lang=3Dja class=3Dinfo>id3v2-00 =
(=E6=9C=80=E7=B5=82=E6=9B=B4=E6=96=B0=E6=97=A5=E6=99=82 2006-12-18 =
06:26:06=20
=E6=9B=B4=E6=96=B0=E8=80=85 <SPAN title=3DDanONeill><A title=3DDanONeill =
href=3D"http://www.id3.org/DanONeill"=20
generated=3D"True">DanONeill</A></SPAN>)</P>
<DIV id=3Dpagebottom></DIV></DIV>
<CENTER><A href=3D"http://www.id3.org/Copyright">Copyright</A> =C2=A9 =
1998-2009 by=20
their respective owners</CENTER></BODY></HTML>

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: image/gif
Content-Transfer-Encoding: base64
Content-Location: http://www.id3.org/id3v2.gif

R0lGODlhOAA2ANUAAAAAABEJCRcXFyIREScnJzc3N0EsLE45OUhISFxKSldXV2VOTmJiYnRjY29w
cHd3d/9bAP9pAPtyDvqAJf+OO/+URv+lY4KCgpmZma2fn6emprW0tP+6h8q7u8jIyNvNzc/Q0NnZ
2ebm5vLy8v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACwAAAAAOAA2AAAG/8CJZEgcRiyk5EbB
aDoZjwtmExolr9isdiuJeL9fZPICKJvPZkFBgRFt3+8uGCwmkdF4NOHihvtJcnNedXd5hmUCGH9w
gYKEh5BlCH2LWI1zj5GQCCGVloJhV4WahgRWnoCgg6KkkQWUi6oREJmthw+oFbq7uxQcVx5RFxcP
TQgFArYAGqjNWyIhGgqkBc7WWxoFmorX3VfTkAKdfxcFCOfox8zXCJG4f+B5F90eyYfVfwyH890Y
keNw9Bnidy1EJIJvBMrzRiJeHnwB9zHcEAmWFoV4EFoTYc+QBz8Y0Wj0I41AgQfjCEBaR8IDBikb
rIQ8M/LNKAAE3LQ7xO0BGv8FJGaaqanFIAAEHu4waAhpHkUABcqVaSJxkYcCBD6KkBQUEq52OUlw
xCm0DFE/HqZ2PbT0AgOC7QSUBXB2SwgFyRS40bdhw4AyCkD4BJolRDIEc+tqeUo3iQMAHUg0KBN5
MoIsIwRiSNwsxIY7QH0eIEExAYkPXLGAW8rZmkARPgGE2KpoQWqxO/WuXbgoGjcS/gAEK1Pbg4gA
qUWsvtL6T/ANScCJEGhALAkNZpYybcy86p+0OB+AuxwvQ5IEZnBhn/qgmFvvztEU+LgTANAONEmo
xCMX/p8QDyDAxinapIGGBoblQUBz14ywnyHQiTDChBROyOBGkXwU0UAMBXeGiEVZXOhMfXlcBpJ/
nUXCUkIoouJhHgKAGGKLlYTwYB6EncjhNQ7l8duGvDUzQo94mJgPjW+MINU/lczFgAhQRiklNB54
oMGSkeR4pDJc6iHjFnN1qQl0noQpJpJgnsnlO6iYqeYZP5b5piYFkOmMm2cm4g2eXDKgwZdyvimA
Goi1wdAVQQAAOw==

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/wiki/mentalwealth_id3/css/common.css

HTML {
	LINE-HEIGHT: 1.25em; BACKGROUND-COLOR: white; FONT-FAMILY: Arial, =
Lucida Grande, sans-serif; COLOR: black; FONT-SIZE: 0.85em
}
A:hover {
	COLOR: #0044b3
}
A {
	COLOR: #597bb3
}
A.nonexistent {
	COLOR: gray
}
A.badinterwiki {
	COLOR: gray
}
H1 A {
	COLOR: black; TEXT-DECORATION: none
}
LI P {
	MARGIN: 0.25em 0px
}
LI.gap {
	MARGIN-TOP: 0.5em
}
A {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
IMG {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
IMG.drawing {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
DT {
	FONT-WEIGHT: bold
}
PRE {
	BORDER-BOTTOM: #c0c0c0 1pt solid; BORDER-LEFT: #c0c0c0 1pt solid; =
PADDING-BOTTOM: 0.5em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
FONT-FAMILY: courier, monospace; WORD-WRAP: break-word; WHITE-SPACE: =
pre-wrap; BACKGROUND: #f0ece6; BORDER-TOP: #c0c0c0 1pt solid; =
BORDER-RIGHT: #c0c0c0 1pt solid; PADDING-TOP: 0.5em
}
TABLE {
	MARGIN: 0.5em 0px; BORDER-COLLAPSE: collapse
}
TD {
	BORDER-BOTTOM: #adb9cc 1px solid; BORDER-LEFT: #adb9cc 1px solid; =
PADDING-BOTTOM: 0.25em; PADDING-LEFT: 0.25em; PADDING-RIGHT: 0.25em; =
BORDER-TOP: #adb9cc 1px solid; BORDER-RIGHT: #adb9cc 1px solid; =
PADDING-TOP: 0.25em
}
TD P {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
HR {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BACKGROUND-COLOR: =
#c0c0c0; HEIGHT: 1px; BORDER-TOP: medium none; BORDER-RIGHT: medium none
}
.hr1 {
	HEIGHT: 2px
}
.hr2 {
	HEIGHT: 3px
}
.hr3 {
	HEIGHT: 4px
}
.hr4 {
	HEIGHT: 5px
}
.hr5 {
	HEIGHT: 6px
}
.hr6 {
	HEIGHT: 7px
}
.u {
	TEXT-DECORATION: underline
}
.strike {
	TEXT-DECORATION: line-through
}
.table-of-contents {
	TEXT-ALIGN: left; MARGIN: 0.5em; PADDING-LEFT: 2em; WIDTH: 50%; =
FONT-SIZE: small
}
.table-of-contents OL {
	LIST-STYLE-TYPE: decimal; MARGIN: 0px 0px 0px 1em
}
.table-of-contents UL {
	LIST-STYLE-TYPE: none; MARGIN: 0px
}
.table-of-contents-heading {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; FONT-WEIGHT: bold; PADDING-TOP: 0px
}
footnotes UL {
	PADDING-BOTTOM: 0px; MARGIN: 0px 0px 1em; PADDING-LEFT: 2em; =
PADDING-RIGHT: 2em; PADDING-TOP: 0px
}
.footnotes LI {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
.info {
	COLOR: gray; FONT-SIZE: 0.85em
}
.warning {
	COLOR: red
}
.error {
	COLOR: red
}
STRONG.highlight {
	PADDING-BOTTOM: 1pt; BACKGROUND-COLOR: #cce0ff; PADDING-LEFT: 1pt; =
PADDING-RIGHT: 1pt; PADDING-TOP: 1pt
}
.recentchanges P {
	MARGIN: 0.25em
}
.recentchanges TD {
	BORDER-BOTTOM: #f0ece6 1pt solid; BORDER-LEFT: medium none; BACKGROUND: =
#f7f6f2; VERTICAL-ALIGN: top; BORDER-TOP: medium none; BORDER-RIGHT: =
medium none
}
.rcdaybreak TD {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BACKGROUND: =
#b8c5d9; BORDER-TOP: medium none; BORDER-RIGHT: medium none
}
.rcdaybreak TD A {
	FONT-SIZE: 0.88em
}
.rcicon1 {
	TEXT-ALIGN: center
}
.rcicon2 {
	TEXT-ALIGN: center
}
.rcpagelink {
	WIDTH: 33%
}
.rctime {
	WHITE-SPACE: nowrap; FONT-SIZE: 0.88em
}
.rceditor {
	WHITE-SPACE: nowrap; FONT-SIZE: 0.88em
}
.rccomment {
	WIDTH: 66%; COLOR: gray; FONT-SIZE: 0.88em
}
.rcrss {
	FLOAT: right
}
[dir=3D'rtl'].recentchanges .rcrss {
	FLOAT: left
}
.userpref TABLE {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none
}
.userpref TD {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none
}
DIV.codearea {
	BORDER-BOTTOM: #aebdcc 1pt solid; BORDER-LEFT: #aebdcc 1pt solid; =
PADDING-BOTTOM: 0px; BACKGROUND-COLOR: #f3f5f7; MARGIN: 0.5em 0px; =
PADDING-LEFT: 0px; PADDING-RIGHT: 0px; COLOR: black; BORDER-TOP: #aebdcc =
1pt solid; BORDER-RIGHT: #aebdcc 1pt solid; PADDING-TOP: 0px
}
DIV.codearea PRE {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: =
10pt; MARGIN: 0px; PADDING-LEFT: 10pt; PADDING-RIGHT: 10pt; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none; PADDING-TOP: 10pt
}
A.codenumbers {
	MARGIN: 0px 10pt; COLOR: gray; FONT-SIZE: 0.85em
}
DIV.codearea PRE SPAN.LineNumber {
	COLOR: gray
}
DIV.codearea PRE SPAN.ID {
	COLOR: #000000
}
DIV.codearea PRE SPAN.Operator {
	COLOR: #0000c0
}
DIV.codearea PRE SPAN.Char {
	COLOR: #004080
}
DIV.codearea PRE SPAN.Comment {
	COLOR: #008000
}
DIV.codearea PRE SPAN.Number {
	COLOR: #0080c0
}
DIV.codearea PRE SPAN.String {
	COLOR: #004080
}
DIV.codearea PRE SPAN.SPChar {
	COLOR: #0000c0
}
DIV.codearea PRE SPAN.ResWord {
	COLOR: #a00000
}
DIV.codearea PRE SPAN.ConsWord {
	COLOR: #008080; FONT-WEIGHT: bold
}
DIV.codearea PRE SPAN.Error {
	BORDER-BOTTOM: #ff0000 1.5pt solid; BORDER-LEFT: #ff0000 1.5pt solid; =
COLOR: #ff8080; BORDER-TOP: #ff0000 1.5pt solid; BORDER-RIGHT: #ff0000 =
1.5pt solid
}
DIV.codearea PRE SPAN.ResWord2 {
	COLOR: #0080ff; FONT-WEIGHT: bold
}
DIV.codearea PRE SPAN.Special {
	COLOR: #0000ff
}
DIV.codearea PRE SPAN.Preprc {
	COLOR: #803999
}
#pageinfo {
	MARGIN-TOP: 2em
}
#credits IMG {
	VERTICAL-ALIGN: middle
}
#preview {
	BORDER-BOTTOM: #e5e5e5 2px solid; BORDER-LEFT: #e5e5e5 2px solid; =
PADDING-BOTTOM: 0.5em; PADDING-LEFT: 0.5em; PADDING-RIGHT: 0.5em; =
BACKGROUND: url(../img/draft.png); BORDER-TOP: #e5e5e5 2px solid; =
BORDER-RIGHT: #e5e5e5 2px solid; PADDING-TOP: 0.5em
}
.diff {
	WIDTH: 99%
}
.diff-title {
	BACKGROUND-COLOR: #c0c0c0
}
.diff-added {
	BACKGROUND-COLOR: #e0ffe0; VERTICAL-ALIGN: sub
}
.diff-removed {
	BACKGROUND-COLOR: #ffffe0; VERTICAL-ALIGN: sub
}
.diff-added SPAN {
	BACKGROUND-COLOR: #80ff80
}
.diff-removed SPAN {
	BACKGROUND-COLOR: #ffff80
}
FORM.dialog {
	MARGIN: 0px 15px
}
.dialog TD {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: =
5px; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; BORDER-TOP: medium none; =
BORDER-RIGHT: medium none; PADDING-TOP: 5px
}
.dialog TD.label {
	TEXT-ALIGN: right; WIDTH: 25%; FONT-WEIGHT: bold
}
*[dir=3D'rtl'] .dialog TD.label {
	TEXT-ALIGN: left
}
.dialog TD.content INPUT {
	WIDTH: 100%
}
#message P {
	PADDING-BOTTOM: 0px; MARGIN: 5px 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; FONT-WEIGHT: bold; PADDING-TOP: 0px
}
#message DIV.buttons {
	FONT-WEIGHT: normal
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/base.css

HTML {
	FONT-SIZE: 81%
}
HTML {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BODY {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BODY {
	FONT: 1em Verdana, Arial, Helvetica, sans-serif; VERTICAL-ALIGN: =
text-top
}
P {
	FONT-SIZE: 1em
}
OL {
	FONT-SIZE: 1em
}
UL {
	FONT-SIZE: 1em
}
LI {
	FONT-SIZE: 1em
}
TABLE {
	FONT-SIZE: 1em
}
P {
	MARGIN: 1.2em 0px 0px
}
H1 {
	MARGIN: 1.2em 0px 0px
}
H2 {
	MARGIN: 1.2em 0px 0px
}
H3 {
	MARGIN: 1.2em 0px 0px
}
H4 {
	MARGIN: 1.2em 0px 0px
}
H5 {
	MARGIN: 1.2em 0px 0px
}
H6 {
	MARGIN: 1.2em 0px 0px
}
INPUT {
	FONT-SIZE: 1em
}
SELECT {
	FONT-SIZE: 1em
}
TH {
	FONT-SIZE: 1em
}
TR {
	FONT-SIZE: 1em
}
TD {
	FONT-SIZE: 1em
}
PRE {
	FONT-FAMILY: monospace, courier; FONT-SIZE: 1.1em
}
TT {
	FONT-FAMILY: monospace, courier; FONT-SIZE: 1.1em
}
STRONG {
	FONT-WEIGHT: bold
}
B {
	FONT-WEIGHT: bold
}
SMALL {
	FONT-SIZE: 0.8em
}
IMG {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
TABLE {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; WIDTH: 99%; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
TH {
	TEXT-ALIGN: left; FONT-WEIGHT: bold
}
TR {
	TEXT-ALIGN: left
}
TH {
	VERTICAL-ALIGN: top
}
TR {
	VERTICAL-ALIGN: top
}
TD {
	VERTICAL-ALIGN: top
}
H1 {
	MARGIN-TOP: 0px; FONT-SIZE: 1.7em
}
H2 {
	BORDER-BOTTOM: black 2px solid; FONT-SIZE: 1.4em
}
H3 {
	BORDER-LEFT: black 10px solid; PADDING-LEFT: 0.3em; FONT-SIZE: 1.4em
}
H4 {
	BORDER-LEFT: black 3px solid; PADDING-LEFT: 0.3em; FONT-SIZE: 1em
}
H5 {
	FONT-SIZE: 1em; FONT-WEIGHT: bold
}
H6 {
	FONT-SIZE: 1em; FONT-WEIGHT: bold
}
H6 {
	MARGIN-BOTTOM: -1em
}
#sidebar {
	PADDING-BOTTOM: 0px; MARGIN: 0px 8px 0px 12px; PADDING-LEFT: 0px; =
WIDTH: 160px; PADDING-RIGHT: 0px; DISPLAY: inline; FLOAT: left; =
FONT-SIZE: 0.88em; PADDING-TOP: 0px
}
#page {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 15px; MARGIN: 10px 10px 10px 185px; PADDING-LEFT: 30px; =
PADDING-RIGHT: 30px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black =
1px solid; PADDING-TOP: 15px
}
#credits {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#version {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#timings {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#message {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 10px 10px 10px 185px; PADDING-LEFT: 10px; =
PADDING-RIGHT: 10px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black =
1px solid; PADDING-TOP: 5px
}
#header {
	MARGIN: 10px
}
#logo {
	PADDING-BOTTOM: 5px; MARGIN: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: =
5px; WHITE-SPACE: nowrap; FONT-SIZE: 1.7em; FONT-WEIGHT: bold; =
PADDING-TOP: 5px
}
#logo IMG {
	VERTICAL-ALIGN: middle
}
#logo A {
	TEXT-DECORATION: none
}
#searchform {
	PADDING-BOTTOM: 0px; MARGIN: 5px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; WHITE-SPACE: nowrap; FLOAT: right; PADDING-TOP: 0px
}
*[dir=3D'rtl'] #searchform {
	FLOAT: left
}
#searchform FORM DIV {
	DISPLAY: inline
}
.sidepanel {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; MARGIN: =
0px 0px 10px; WIDTH: 160px; FLOAT: right; FONT-SIZE: 1em; BORDER-TOP: =
black 1px solid; BORDER-RIGHT: black 2px solid
}
.sidepanel H1 {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: medium none; =
PADDING-BOTTOM: 0.2em; MARGIN: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; FONT-SIZE: 1em; BORDER-TOP: medium none; BORDER-RIGHT: medium =
none; PADDING-TOP: 0.2em
}
.sidepanel UL {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
.sidepanel LI {
	BORDER-BOTTOM: black 1px solid; PADDING-BOTTOM: 2px; MARGIN: 0px; =
PADDING-LEFT: 10px; PADDING-RIGHT: 10px; PADDING-TOP: 2px
}
.sidepanel LI FORM {
	MARGIN: 0px
}
.sidepanel A {
	DISPLAY: block; TEXT-DECORATION: none
}
.sidepanel A:hover {
	TEXT-DECORATION: underline
}
SPAN.sep {
	DISPLAY: none
}
.footnotes DIV {
	WIDTH: 5em; BORDER-TOP: black 1px solid
}
.info {
	FONT-SIZE: 0.8em
}
DIV.codearea PRE {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: =
0.9em; MARGIN: 0px; PADDING-LEFT: 0.9em; PADDING-RIGHT: 0.9em; =
BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0.9em
}
#navibar LI.current {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: medium none; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none
}
.editbar FORM {
	MARGIN: 0px; DISPLAY: inline
}
.editbar FORM DIV {
	MARGIN: 0px; DISPLAY: inline
}
#editor-textarea {
	WIDTH: 95%
}
#editor-comment {
	WIDTH: 95%
}
#pagebottom {
	CLEAR: both
}
.searchresult DD SPAN {
	FONT-WEIGHT: bold
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/skin-id3.css

HTML {
	BACKGROUND-COLOR: #fff
}
BODY {
	BACKGROUND-COLOR: #fff
}
BODY {
	COLOR: #000
}
#page {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#message {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#header {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel H1 {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel LI {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#navibar LI.current {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.footnotes DIV {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#header {
	BACKGROUND: #ffffff
}
.sidepanel {
	BACKGROUND: #ffffff
}
.sidepanel H1 {
	COLOR: #ff6600
}
#navibar LI.current {
	BACKGROUND: #ff6600
}
H2 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
H3 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
H4 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
#credits {
	COLOR: #777
}
#version {
	COLOR: #777
}
#timings {
	COLOR: #777
}
.info {
	COLOR: #777
}
#logo A {
	COLOR: #ff6600
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: 7bit
Content-Location: http://www.id3.org/wiki/mentalwealth_id3/css/screen.css

@import url( base.css );
@import url( skin-id3.css );

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/wiki/mentalwealth_id3/css/print.css

HTML {
	BACKGROUND-COLOR: #fff
}
BODY {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; PADDING-BOTTOM: 0px; MARGIN: =
1.5cm; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Arial, =
sans-serif; FONT-SIZE: 12pt; BORDER-TOP: 0px; BORDER-RIGHT: 0px; =
PADDING-TOP: 0px
}
TABLE {
	WIDTH: 99%
}
.footnotes DIV {
	WIDTH: 5em; BORDER-TOP: #eee 1pt solid
}
PRE {
	FONT-FAMILY: monospace, courier; FONT-SIZE: 10pt
}
H1 {
	MARGIN: 0px
}
H2 {
	MARGIN: 0px
}
H3 {
	MARGIN: 0px
}
H4 {
	MARGIN: 0px
}
H5 {
	MARGIN: 0px
}
H6 {
	MARGIN: 0px
}
H1 {
	FONT-SIZE: 14pt
}
H2 {
	BORDER-BOTTOM: #000 2px solid; PADDING-BOTTOM: 0.3em; LINE-HEIGHT: =
1.2em; MARGIN-TOP: 1.5em; FONT-SIZE: 14pt
}
H3 {
	BORDER-LEFT: #000 10px solid; MARGIN-TOP: 1.5em; PADDING-LEFT: 0.3em; =
FONT-SIZE: 14pt
}
H4 {
	BORDER-LEFT: #000 3px solid; MARGIN-TOP: 1.5em; PADDING-LEFT: 0.3em; =
FONT-SIZE: 12pt
}
H5 {
	FONT-SIZE: 12pt
}
H6 {
	FONT-SIZE: 12pt
}
A.interwiki:before {
	CONTENT: attr(title) ":"
}
A.badinterwiki:before {
	CONTENT: attr(title) ":"
}
A.interwiki IMG {
	DISPLAY: none
}
A.badinterwiki IMG {
	DISPLAY: none
}
#header {
	DISPLAY: none
}
#sidebar {
	DISPLAY: none
}
#footer {
	DISPLAY: none
}
#timings {
	DISPLAY: none
}
#credits {
	DISPLAY: none
}
#message {
	DISPLAY: none
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/base.css

HTML {
	FONT-SIZE: 81%
}
HTML {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BODY {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; PADDING-TOP: 0px
}
BODY {
	FONT: 1em Verdana, Arial, Helvetica, sans-serif; VERTICAL-ALIGN: =
text-top
}
P {
	FONT-SIZE: 1em
}
OL {
	FONT-SIZE: 1em
}
UL {
	FONT-SIZE: 1em
}
LI {
	FONT-SIZE: 1em
}
TABLE {
	FONT-SIZE: 1em
}
P {
	MARGIN: 1.2em 0px 0px
}
H1 {
	MARGIN: 1.2em 0px 0px
}
H2 {
	MARGIN: 1.2em 0px 0px
}
H3 {
	MARGIN: 1.2em 0px 0px
}
H4 {
	MARGIN: 1.2em 0px 0px
}
H5 {
	MARGIN: 1.2em 0px 0px
}
H6 {
	MARGIN: 1.2em 0px 0px
}
INPUT {
	FONT-SIZE: 1em
}
SELECT {
	FONT-SIZE: 1em
}
TH {
	FONT-SIZE: 1em
}
TR {
	FONT-SIZE: 1em
}
TD {
	FONT-SIZE: 1em
}
PRE {
	FONT-FAMILY: monospace, courier; FONT-SIZE: 1.1em
}
TT {
	FONT-FAMILY: monospace, courier; FONT-SIZE: 1.1em
}
STRONG {
	FONT-WEIGHT: bold
}
B {
	FONT-WEIGHT: bold
}
SMALL {
	FONT-SIZE: 0.8em
}
IMG {
	BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; BORDER-TOP: 0px; BORDER-RIGHT: =
0px
}
TABLE {
	PADDING-BOTTOM: 0px; MARGIN: 0px; PADDING-LEFT: 0px; WIDTH: 99%; =
PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
TH {
	TEXT-ALIGN: left; FONT-WEIGHT: bold
}
TR {
	TEXT-ALIGN: left
}
TH {
	VERTICAL-ALIGN: top
}
TR {
	VERTICAL-ALIGN: top
}
TD {
	VERTICAL-ALIGN: top
}
H1 {
	MARGIN-TOP: 0px; FONT-SIZE: 1.7em
}
H2 {
	BORDER-BOTTOM: black 2px solid; FONT-SIZE: 1.4em
}
H3 {
	BORDER-LEFT: black 10px solid; PADDING-LEFT: 0.3em; FONT-SIZE: 1.4em
}
H4 {
	BORDER-LEFT: black 3px solid; PADDING-LEFT: 0.3em; FONT-SIZE: 1em
}
H5 {
	FONT-SIZE: 1em; FONT-WEIGHT: bold
}
H6 {
	FONT-SIZE: 1em; FONT-WEIGHT: bold
}
H6 {
	MARGIN-BOTTOM: -1em
}
#sidebar {
	PADDING-BOTTOM: 0px; MARGIN: 0px 8px 0px 12px; PADDING-LEFT: 0px; =
WIDTH: 160px; PADDING-RIGHT: 0px; DISPLAY: inline; FLOAT: left; =
FONT-SIZE: 0.88em; PADDING-TOP: 0px
}
#page {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 15px; MARGIN: 10px 10px 10px 185px; PADDING-LEFT: 30px; =
PADDING-RIGHT: 30px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black =
1px solid; PADDING-TOP: 15px
}
#credits {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#version {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#timings {
	TEXT-ALIGN: center; PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: =
5px 0px; PADDING-LEFT: 0px; WIDTH: 160px; PADDING-RIGHT: 0px; FLOAT: =
left; FONT-SIZE: 0.9em; PADDING-TOP: 0px
}
#message {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; =
PADDING-BOTTOM: 5px; MARGIN: 10px 10px 10px 185px; PADDING-LEFT: 10px; =
PADDING-RIGHT: 10px; BORDER-TOP: black 1px solid; BORDER-RIGHT: black =
1px solid; PADDING-TOP: 5px
}
#header {
	MARGIN: 10px
}
#logo {
	PADDING-BOTTOM: 5px; MARGIN: 0px; PADDING-LEFT: 5px; PADDING-RIGHT: =
5px; WHITE-SPACE: nowrap; FONT-SIZE: 1.7em; FONT-WEIGHT: bold; =
PADDING-TOP: 5px
}
#logo IMG {
	VERTICAL-ALIGN: middle
}
#logo A {
	TEXT-DECORATION: none
}
#searchform {
	PADDING-BOTTOM: 0px; MARGIN: 5px; PADDING-LEFT: 0px; PADDING-RIGHT: =
0px; WHITE-SPACE: nowrap; FLOAT: right; PADDING-TOP: 0px
}
*[dir=3D'rtl'] #searchform {
	FLOAT: left
}
#searchform FORM DIV {
	DISPLAY: inline
}
.sidepanel {
	BORDER-BOTTOM: black 2px solid; BORDER-LEFT: black 1px solid; MARGIN: =
0px 0px 10px; WIDTH: 160px; FLOAT: right; FONT-SIZE: 1em; BORDER-TOP: =
black 1px solid; BORDER-RIGHT: black 2px solid
}
.sidepanel H1 {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: medium none; =
PADDING-BOTTOM: 0.2em; MARGIN: 0px; PADDING-LEFT: 10px; PADDING-RIGHT: =
10px; FONT-SIZE: 1em; BORDER-TOP: medium none; BORDER-RIGHT: medium =
none; PADDING-TOP: 0.2em
}
.sidepanel UL {
	PADDING-BOTTOM: 0px; LIST-STYLE-TYPE: none; MARGIN: 0px; PADDING-LEFT: =
0px; PADDING-RIGHT: 0px; PADDING-TOP: 0px
}
.sidepanel LI {
	BORDER-BOTTOM: black 1px solid; PADDING-BOTTOM: 2px; MARGIN: 0px; =
PADDING-LEFT: 10px; PADDING-RIGHT: 10px; PADDING-TOP: 2px
}
.sidepanel LI FORM {
	MARGIN: 0px
}
.sidepanel A {
	DISPLAY: block; TEXT-DECORATION: none
}
.sidepanel A:hover {
	TEXT-DECORATION: underline
}
SPAN.sep {
	DISPLAY: none
}
.footnotes DIV {
	WIDTH: 5em; BORDER-TOP: black 1px solid
}
.info {
	FONT-SIZE: 0.8em
}
DIV.codearea PRE {
	BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: =
0.9em; MARGIN: 0px; PADDING-LEFT: 0.9em; PADDING-RIGHT: 0.9em; =
BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0.9em
}
#navibar LI.current {
	BORDER-BOTTOM: black 1px solid; BORDER-LEFT: medium none; BORDER-TOP: =
medium none; BORDER-RIGHT: medium none
}
.editbar FORM {
	MARGIN: 0px; DISPLAY: inline
}
.editbar FORM DIV {
	MARGIN: 0px; DISPLAY: inline
}
#editor-textarea {
	WIDTH: 95%
}
#editor-comment {
	WIDTH: 95%
}
#pagebottom {
	CLEAR: both
}
.searchresult DD SPAN {
	FONT-WEIGHT: bold
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/skin-id3.css

HTML {
	BACKGROUND-COLOR: #fff
}
BODY {
	BACKGROUND-COLOR: #fff
}
BODY {
	COLOR: #000
}
#page {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#message {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#header {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel H1 {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.sidepanel LI {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#navibar LI.current {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
.footnotes DIV {
	BORDER-BOTTOM-COLOR: #9c9c9c; BORDER-TOP-COLOR: #9c9c9c; =
BORDER-RIGHT-COLOR: #9c9c9c; BORDER-LEFT-COLOR: #9c9c9c
}
#header {
	BACKGROUND: #ffffff
}
.sidepanel {
	BACKGROUND: #ffffff
}
.sidepanel H1 {
	COLOR: #ff6600
}
#navibar LI.current {
	BACKGROUND: #ff6600
}
H2 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
H3 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
H4 {
	BORDER-BOTTOM-COLOR: #ff6600; BORDER-TOP-COLOR: #ff6600; =
BORDER-RIGHT-COLOR: #ff6600; BORDER-LEFT-COLOR: #ff6600
}
#credits {
	COLOR: #777
}
#version {
	COLOR: #777
}
#timings {
	COLOR: #777
}
.info {
	COLOR: #777
}
#logo A {
	COLOR: #ff6600
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: 7bit
Content-Location: http://www.id3.org/screen.css

@import url( base.css );
@import url( skin-id3.css );

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: text/css;
	charset="iso-2022-jp"
Content-Transfer-Encoding: 7bit
Content-Location: http://www.id3.org/wiki/mentalwealth_id3/css/projection.css

@import url( screen.css );
HTML {
	LINE-HEIGHT: 1.8em
}
BODY {
	FONT-SIZE: 22pt
}
B {
	FONT-SIZE: 22pt
}
EM {
	FONT-SIZE: 22pt
}
A {
	FONT-SIZE: 22pt
}
SPAN {
	FONT-SIZE: 22pt
}
DIV {
	FONT-SIZE: 22pt
}
P {
	FONT-SIZE: 22pt
}
TD {
	FONT-SIZE: 22pt
}
H2 {
	FONT-SIZE: 24pt
}
H3 {
	FONT-SIZE: 22pt
}
H4 {
	FONT-SIZE: 20pt
}
H5 {
	FONT-SIZE: 18pt
}
H6 {
	FONT-SIZE: 16pt
}
TT {
	FONT-SIZE: 18pt
}
PRE {
	FONT-SIZE: 18pt
}
SUP {
	FONT-SIZE: 14pt
}
SUB {
	FONT-SIZE: 14pt
}
.navigation {
	PADDING-BOTTOM: 8pt; FONT-SIZE: 16pt; PADDING-TOP: 8pt
}

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.id3.org/wiki/common/js/common.js

//=0A=
// MoinMoin commonly used JavaScript functions=0A=
//=0A=
=0A=
// use this instead of assigning to window.onload directly:=0A=
function addLoadEvent(func) {=0A=
  // alert("addLoadEvent " + func)=0A=
  var oldonload =3D window.onload;=0A=
  if (typeof window.onload !=3D 'function') {=0A=
    window.onload =3D func;=0A=
  } else {=0A=
    window.onload =3D function() {=0A=
      oldonload();=0A=
      func();=0A=
    }=0A=
  }=0A=
}=0A=
=0A=
function can_use_gui_editor() {=0A=
    var sAgent =3D navigator.userAgent.toLowerCase();=0A=
 =0A=
    if (sAgent.indexOf("msie") !=3D -1 && sAgent.indexOf("mac") =3D=3D =
-1 &&=0A=
        sAgent.indexOf("opera") =3D=3D -1 ) {=0A=
        // Internet Explorer=0A=
        var sBrowserVersion =3D navigator.appVersion.match(/MSIE =
(.\..)/)[1];=0A=
        return ( sBrowserVersion >=3D 5.5 );=0A=
    } else if (navigator.product =3D=3D "Gecko" && =0A=
               navigator.productSub >=3D 20030210) {=0A=
        // Gecko=0A=
        return true;=0A=
    }=0A=
    // else if (sAgent.indexOf("safari") !=3D -1 ) {=0A=
    //    // Safari - build must be at least 312 (1.3)=0A=
    //    return (sAgent.match( /safari\/(\d+)/ )[1] >=3D 312 );=0A=
    // } =0A=
    else {=0A=
        // Unknown browser, assume gui editor is not compatible=0A=
        return false;=0A=
    }=0A=
}=0A=
=0A=
=0A=
function update_edit_links() {=0A=
    // Update editlink according if if the browser is compatible=0A=
    if (can_use_gui_editor() =3D=3D false){=0A=
        //alert("update_edit_links: can't use gui editor");=0A=
        return;=0A=
    }=0A=
    var editlinks =3D document.getElementsByName("editlink");=0A=
    for (i =3D 0; i < editlinks.length; i++) {=0A=
        var link =3D editlinks[i];=0A=
        href =3D =
link.href.replace('editor=3Dtextonly','editor=3Dguipossible');=0A=
        link.href =3D href;=0A=
        //alert("update_edit_links: modified to guipossible");=0A=
    }=0A=
}=0A=
=0A=
=0A=
function add_gui_editor_links() {=0A=
    // Add gui editor link after the text editor link=0A=
    =0A=
    // If the variable is not set or browser is not compatible, exit=0A=
    try {gui_editor_link_href}=0A=
    catch (e) {=0A=
        //alert("add_gui_editor_links: gui_editor_link_href not here");=0A=
        return=0A=
    }=0A=
    if (can_use_gui_editor() =3D=3D false){=0A=
        //alert("add_gui_editor_links: can't use gui_editor");=0A=
        return;=0A=
    }=0A=
    var all =3D document.getElementsByName('texteditlink');=0A=
    for (i =3D 0; i < all.length; i++) {=0A=
        var textEditorLink =3D all[i];=0A=
        // Create a list item with a link=0A=
        var guiEditorLink =3D document.createElement('a');=0A=
        guiEditorLink.href =3D gui_editor_link_href;=0A=
        var text =3D document.createTextNode(gui_editor_link_text);=0A=
        guiEditorLink.appendChild(text);=0A=
        var listItem =3D document.createElement('li')=0A=
        listItem.appendChild(guiEditorLink);=0A=
        // Insert in the editbar=0A=
        var editbar =3D textEditorLink.parentNode.parentNode=0A=
        var nextListItem =3D textEditorLink.parentNode.nextSibling;=0A=
        editbar.insertBefore(listItem, nextListItem);=0A=
        //alert("add_gui_editor_links: added gui editor link");=0A=
    }=0A=
}=0A=
 =0A=
=0A=
function show_switch2gui() {=0A=
    // Show switch to gui editor link if the browser is compatible=0A=
    if (can_use_gui_editor() =3D=3D false) return;=0A=
    =0A=
    var switch2gui =3D document.getElementById('switch2gui')=0A=
    if (switch2gui) {=0A=
        switch2gui.style.display =3D 'inline';=0A=
    }=0A=
}=0A=
=0A=
=0A=
function load() {=0A=
    // Do not name this "onload", it does not work with IE :-)=0A=
    // TODO: create separate onload for each type of view and set the=0A=
    // correct function name in the html. =0A=
    // e.g <body onlod=3D'editor_onload()'>=0A=
    =0A=
    // Page view stuff=0A=
    update_edit_links();=0A=
    add_gui_editor_links();=0A=
    =0A=
    // Editor stuff=0A=
    show_switch2gui();=0A=
}=0A=
=0A=
=0A=
function before_unload(evt) {=0A=
    // TODO: Better to set this in the editor html, as it does not make=0A=
    // sense elsehwere.=0A=
    // confirmleaving is available when editing=0A=
    try {return confirmleaving();}=0A=
    catch (e) {}=0A=
}=0A=
=0A=
// Initialize after loading the page=0A=
addLoadEvent(load)=0A=
=0A=
// Catch before unloading the page=0A=
window.onbeforeunload =3D before_unload=0A=
=0A=

------=_NextPart_000_001B_01CC11B2.B09A60E0
Content-Type: application/octet-stream
Content-Transfer-Encoding: quoted-printable
Content-Location: http://pagead2.googlesyndication.com/pagead/show_ads.js

=0A=
(function(){var g=3Dnull,h=3D(new Date).getTime();var =
i=3Dthis,aa=3Dfunction(a,b){var c=3Da.split("."),d=3Di;!(c[0]in =
d)&&d.execScript&&d.execScript("var "+c[0]);for(var =
e;c.length&&(e=3Dc.shift());)!c.length&&b!=3D=3Dvoid =
0?d[e]=3Db:d=3Dd[e]?d[e]:d[e]=3D{}},ba=3Dfunction(a){return =
a.call.apply(a.bind,arguments)},ca=3Dfunction(a,b){var =
c=3Db||i;if(arguments.length>2){var =
d=3DArray.prototype.slice.call(arguments,2);return function(){var =
b=3DArray.prototype.slice.call(arguments);Array.prototype.unshift.apply(b=
,d);return a.apply(c,b)}}else return function(){return =
a.apply(c,arguments)}},=0A=
j=3Dfunction(){j=3DFunction.prototype.bind&&Function.prototype.bind.toStr=
ing().indexOf("native code")!=3D-1?ba:ca;return =
j.apply(g,arguments)};var =
da=3D/&/g,ea=3D/</g,fa=3D/>/g,ga=3D/\"/g,k=3D{"\0":"\\0","\u0008":"\\b","=
\u000c":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\u000b":"\\x0B",'"':'\\"'=
,"\\":"\\\\"},n=3D{"'":"\\'"},q=3Dfunction(a,b){if(a<b)return-1;else =
if(a>b)return 1;return 0};var s,t,u,x,z=3Dfunction(){return =
i.navigator?i.navigator.userAgent:g};x=3Du=3Dt=3Ds=3D!1;var =
A;if(A=3Dz()){var =
ia=3Di.navigator;s=3DA.indexOf("Opera")=3D=3D0;t=3D!s&&A.indexOf("MSIE")!=
=3D-1;u=3D!s&&A.indexOf("WebKit")!=3D-1;x=3D!s&&!u&&ia.product=3D=3D"Geck=
o"}var B=3Dt,D=3Dx,ja=3Du,E;=0A=
a:{var F=3D"",G;if(s&&i.opera)var H=3Di.opera.version,F=3Dtypeof =
H=3D=3D"function"?H():H;else =
if(D?G=3D/rv\:([^\);]+)(\)|;)/:B?G=3D/MSIE\s+([^\);]+)(\)|;)/:ja&&(G=3D/W=
ebKit\/(\S+)/),G)var ka=3DG.exec(z()),F=3Dka?ka[1]:"";if(B){var =
I,la=3Di.document;I=3Dla?la.documentMode:void =
0;if(I>parseFloat(F)){E=3DString(I);break a}}E=3DF}=0A=
var ma=3DE,na=3D{},J=3Dfunction(a){var b;if(!(b=3Dna[a])){b=3D0;for(var =
c=3DString(ma).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),d=3DString=
(a).replace(/^[\s\xa0]+|[\s\xa0]+$/g,"").split("."),e=3DMath.max(c.length=
,d.length),f=3D0;b=3D=3D0&&f<e;f++){var =
ta=3Dc[f]||"",r=3Dd[f]||"",l=3DRegExp("(\\d*)(\\D*)","g"),y=3DRegExp("(\\=
d*)(\\D*)","g");do{var =
o=3Dl.exec(ta)||["","",""],m=3Dy.exec(r)||["","",""];if(o[0].length=3D=3D=
0&&m[0].length=3D=3D0)break;b=3Dq(o[1].length=3D=3D0?0:parseInt(o[1],10),=
m[1].length=3D=3D0?0:parseInt(m[1],10))||q(o[2].length=3D=3D=0A=
0,m[2].length=3D=3D0)||q(o[2],m[2])}while(b=3D=3D0)}b=3Dna[a]=3Db>=3D0}re=
turn b};var K,L;L=3DK=3D!1;var =
M=3Dz();M&&(M.indexOf("Firefox")!=3D-1?K=3D!0:M.indexOf("Camino")!=3D-1||=
M.indexOf("iPhone")!=3D-1||M.indexOf("iPod")!=3D-1||M.indexOf("iPad")!=3D=
-1||M.indexOf("Android")!=3D-1||M.indexOf("Chrome")!=3D-1&&(L=3D!0));var =
oa=3DK,pa=3DL;var qa=3Ddocument,N=3Dwindow;var =
O=3Dfunction(a){a=3DparseFloat(a);return =
isNaN(a)||a>1||a<0?0:a},ra=3Dfunction(a){if(a=3D=3D"true")return!0;return=
!1},sa=3D/^([\w-]+\.)*([\w-]{2,})(\:[0-9]+)?$/,ua=3Dfunction(a){if(!a)ret=
urn"pagead2.googlesyndication.com";return(a=3Da.match(sa))?a[0]:"pagead2.=
googlesyndication.com"};var =
va=3DO("0"),wa=3DO("0"),xa=3DO("0.2"),ya=3DO("0.002");var =
za=3Dra("false"),Aa=3Dra("false"),Ba=3Dra("false");var =
Ca=3Dfunction(){return =
ua("")};!B||J("9");!D&&!B||B&&J("9")||D&&J("1.9.1");B&&J("9");ua("");var =
P=3Dfunction(a){return!!a&&typeof =
a=3D=3D"function"&&!!a.call},Da=3Dfunction(a){if(!(arguments.length<2))fo=
r(var b=3D1,c=3Darguments.length;b<c;++b)a.push(arguments[b])};function =
Q(a){return typeof =
encodeURIComponent=3D=3D"function"?encodeURIComponent(a):escape(a)}functi=
on =
Ea(a,b){a.attachEvent?a.attachEvent("onload",b):a.addEventListener&&a.add=
EventListener("load",b,!1)}=0A=
function Fa(a,b){if(!(Math.random()<1.0E-4)){var =
c=3DMath.random();if(c<b)return =
a[Math.floor(c/b*a.length)]}return""};aa("google_protectAndRun",function(=
a,b,c){a=3Dj(b,i,a);b=3Dwindow.onerror;window.onerror=3Da;try{c()}catch(d=
){var c=3Dd.toString(),e=3D"";d.fileName&&(e=3Dd.fileName);var =
f=3D-1;if(d.lineNumber)f=3Dd.lineNumber;if(!a(c,e,f))throw =
d;}window.onerror=3Db});=0A=
aa("google_handleError",function(a,b,c,d){if(Math.random()<0.01)a=3D["htt=
p://",Ca(),"/pagead/gen_204","?id=3Djserror","&jscb=3D",za?1:0,"&jscd=3D"=
,Aa?1:0,"&context=3D",Q(a),"&msg=3D",Q(b),"&file=3D",Q(c),"&line=3D",Q(d.=
toString()),"&url=3D",Q(qa.URL.substring(0,512)),"&ref=3D",Q(qa.referrer.=
substring(0,512))],a.push(["&client=3D",Q(N.google_ad_client),"&format=3D=
",Q(N.google_ad_format),"&slotname=3D",Q(N.google_ad_slot),"&output=3D",Q=
(N.google_ad_output),"&ad_type=3D",Q(N.google_ad_type)].join("")),a=3Da.j=
oin(""),N.google_image_requests||=0A=
(N.google_image_requests=3D[]),b=3Dnew =
Image,b.src=3Da,N.google_image_requests.push(b);return!Ba});var =
Ha=3Dfunction(a){try{var =
b=3Da.google_test;a.google_test=3D!b;if(a.google_test=3D=3D=3D!b)return =
a.google_test=3Db,!0}catch(c){}return!1},Ia=3Dg,Ja=3Dfunction(){if(!Ia){f=
or(var =
a=3Dwindow;a!=3Da.parent&&Ha(a.parent);)a=3Da.parent;Ia=3Da}return =
Ia};var =
R,S=3Dfunction(a){this.c=3D[];this.a=3Da||window;this.b=3D0;this.d=3Dg},K=
a=3Dfunction(a,b){this.l=3Da;this.i=3Db};S.prototype.n=3Dfunction(a,b){th=
is.b=3D=3D0&&this.c.length=3D=3D0&&(!b||b=3D=3Dwindow)?(this.b=3D2,this.g=
(new =
Ka(a,window))):this.h(a,b)};S.prototype.h=3Dfunction(a,b){this.c.push(new=
 =
Ka(a,b||this.a));La(this)};S.prototype.o=3Dfunction(a){this.b=3D1;if(a)th=
is.d=3Dthis.a.setTimeout(j(this.f,this),a)};S.prototype.f=3Dfunction(){if=
(this.b=3D=3D1){if(this.d!=3Dg)this.a.clearTimeout(this.d),this.d=3Dg;thi=
s.b=3D0}La(this)};=0A=
S.prototype.p=3Dfunction(){return!0};S.prototype.nq=3DS.prototype.n;S.pro=
totype.nqa=3DS.prototype.h;S.prototype.al=3DS.prototype.o;S.prototype.rl=3D=
S.prototype.f;S.prototype.sz=3DS.prototype.p;var =
La=3Dfunction(a){a.a.setTimeout(j(a.m,a),0)};S.prototype.m=3Dfunction(){i=
f(this.b=3D=3D0&&this.c.length){var =
a=3Dthis.c.shift();this.b=3D2;a.i.setTimeout(j(this.g,this,a),0);La(this)=
}};S.prototype.g=3Dfunction(a){this.b=3D0;a.l()};=0A=
var Ma=3Dfunction(a){try{return =
a.sz()}catch(b){return!1}},Na=3Dfunction(a){return!!a&&(typeof =
a=3D=3D"object"||typeof =
a=3D=3D"function")&&Ma(a)&&P(a.nq)&&P(a.nqa)&&P(a.al)&&P(a.rl)},Oa=3Dfunc=
tion(){if(R&&Ma(R))return R;var =
a=3DJa(),b=3Da.google_jobrunner;if(Na(b))return R=3Db;return =
a.google_jobrunner=3DR=3Dnew =
S(a)},Pa=3Dfunction(a,b){Oa().nq(a,b)},Qa=3Dfunction(a,b){Oa().nqa(a,b)};=
var Ra=3Dfunction(){var =
a=3DT,b=3DU.google_ad_width,c=3DU.google_ad_height,d=3D["<iframe"],e;for(=
e in =
a)a.hasOwnProperty(e)&&Da(d,e+"=3D"+a[e]);d.push('style=3D"left:0;positio=
n:absolute;top:0;"');d.push("></iframe>");b=3D"border:none;height:"+c+"px=
;margin:0;padding:0;position:relative;visibility:visible;width:"+b+"px";r=
eturn['<ins style=3D"display:inline-table;',b,'"><ins =
id=3D"',a.id+"_anchor",'" style=3D"display:block;',b,'">',d.join(" =
"),"</ins></ins>"].join("")};var =
Sa=3Dfunction(){},Ua=3Dfunction(a,b,c){switch(typeof b){case =
"string":Ta(b,c);break;case =
"number":c.push(isFinite(b)&&!isNaN(b)?b:"null");break;case =
"boolean":c.push(b);break;case "undefined":c.push("null");break;case =
"object":if(b=3D=3Dg){c.push("null");break}if(b instanceof Array){var =
d=3Db.length;c.push("[");for(var =
e=3D"",f=3D0;f<d;f++)c.push(e),Ua(a,b[f],c),e=3D",";c.push("]");break}c.p=
ush("{");d=3D"";for(e in b)b.hasOwnProperty(e)&&(f=3Db[e],typeof =
f!=3D"function"&&(c.push(d),Ta(e,c),c.push(":"),Ua(a,f,c),d=3D=0A=
","));c.push("}");break;case "function":break;default:throw =
Error("Unknown type: "+typeof =
b);}},Va=3D{'"':'\\"',"\\":"\\\\","/":"\\/","\u0008":"\\b","\u000c":"\\f"=
,"\n":"\\n","\r":"\\r","\t":"\\t","\u000b":"\\u000b"},Wa=3D/\uffff/.test(=
"\uffff")?/[\\\"\x00-\x1f\x7f-\uffff]/g:/[\\\"\x00-\x1f\x7f-\xff]/g,Ta=3D=
function(a,b){b.push('"');b.push(a.replace(Wa,function(a){if(a in =
Va)return Va[a];var =
b=3Da.charCodeAt(0),e=3D"\\u";b<16?e+=3D"000":b<256?e+=3D"00":b<4096&&(e+=
=3D"0");return Va[a]=3De+b.toString(16)}));b.push('"')};var =
V=3D["google_ad_block","google_ad_channel","google_ad_client","google_ad_=
format","google_ad_height","google_ad_host","google_ad_host_channel","goo=
gle_ad_host_tier_id","google_ad_output","google_ad_override","google_ad_r=
egion","google_ad_section","google_ad_slot","google_ad_type","google_ad_w=
idth","google_adtest","google_allow_expandable_ads","google_alternate_ad_=
url","google_alternate_color","google_analytics_domain_name","google_anal=
ytics_uacct","google_bid","google_city","google_color_bg","google_color_b=
order",=0A=
"google_color_line","google_color_link","google_color_text","google_color=
_url","google_container_id","google_contents","google_country","google_cp=
m","google_ctr_threshold","google_cust_age","google_cust_ch","google_cust=
_gender","google_cust_id","google_cust_interests","google_cust_job","goog=
le_cust_l","google_cust_lh","google_cust_u_url","google_disable_video_aut=
oplay","google_ed","google_eids","google_enable_osd","google_encoding","g=
oogle_font_face","google_font_size","google_frame_id","google_gl",=0A=
"google_hints","google_image_size","google_kw","google_kw_type","google_l=
anguage","google_max_num_ads","google_max_radlink_len","google_num_radlin=
ks","google_num_radlinks_per_unit","google_num_slots_to_rotate","google_o=
nly_ads_with_video","google_only_pyv_ads","google_only_userchoice_ads","g=
oogle_override_format","google_page_url","google_referrer_url","google_re=
gion","google_reuse_colors","google_rl_dest_url","google_rl_filtering","g=
oogle_rl_mode","google_rt","google_safe","google_skip","google_tag_info",=0A=
"google_targeting","google_ui_features","google_ui_version","google_video=
_doc_id","google_video_product_type","google_with_pyv_ads"];var =
W=3Dfunction(a){this.a=3Da;a.google_iframe_oncopy||(a.google_iframe_oncop=
y=3D{handlers:{},log:[],img:Math.random()<0.01?[]:g});this.e=3Da.google_i=
frame_oncopy;a.setTimeout(j(this.k,this),3E4)},Xa;var X=3D"var =
i=3Dthis.id,s=3Dwindow.google_iframe_oncopy,H=3Ds&&s.handlers,h=3DH&&H[i]=
,w=3Dthis.contentWindow,d;try{d=3Dw.document}catch(e){}if(h&&d&&(!d.body|=
|!d.body.firstChild)){if(h.call){i+=3D'.call';setTimeout(h,0)}else =
if(h.match){i+=3D'.nav';w.location.replace(h)}s.log&&s.log.push(i)}";=0A=
/[&<>\"]/.test(X)&&(X.indexOf("&")!=3D-1&&(X=3DX.replace(da,"&amp;")),X.i=
ndexOf("<")!=3D-1&&(X=3DX.replace(ea,"&lt;")),X.indexOf(">")!=3D-1&&(X=3D=
X.replace(fa,"&gt;")),X.indexOf('"')!=3D-1&&(X=3DX.replace(ga,"&quot;")))=
;Xa=3DX;W.prototype.set=3Dfunction(a,b){this.e.handlers[a]=3Db;this.a.add=
EventListener&&this.a.addEventListener("load",j(this.j,this,a),!1)};W.pro=
totype.j=3Dfunction(a){var =
a=3Dthis.a.document.getElementById(a),b=3Da.contentWindow.document;if(a.o=
nload&&b&&(!b.body||!b.body.firstChild))a.onload()};=0A=
W.prototype.k=3Dfunction(){if(this.e.img){var =
a=3Dthis.e.log,b=3Dthis.a.document;if(a.length)b=3D["http://",Ca(),"/page=
ad/gen_204?id=3Diframecopy&log=3D",Q(a.join("-")),"&url=3D",Q(b.URL.subst=
ring(0,512)),"&ref=3D",Q(b.referrer.substring(0,512))].join(""),a.length=3D=
0,a=3Dnew Image,this.e.img.push(a),a.src=3Db}};var Ya=3Dfunction(){var =
a=3D"script";return["<",a,' =
src=3D"http://',ua(""),'/pagead/js/r20110509/r20110506/show_ads_impl.js">=
</',a,">"].join("")},Za=3Dfunction(a,b,c,d){return function(){var =
e=3D!1;d&&Oa().al(3E4);try{var =
f;try{f=3D!!a.document.getElementById(b).contentWindow.document}catch(ta)=
{f=3D!1}if(f){var r=3Da.document.getElementById(b).contentWindow,=0A=
l=3Dr.document;if(!l.body||!l.body.firstChild)l.open(),r.google_async_ifr=
ame_close=3D!0,l.write(c)}else{var =
y=3Da.document.getElementById(b).contentWindow,o;f=3Dc;f=3DString(f);if(f=
.quote)o=3Df.quote();else{r=3D['"'];for(l=3D0;l<f.length;l++){var =
m=3Df.charAt(l),Ga=3Dm.charCodeAt(0),nb=3Dr,ob=3Dl+1,ha;if(!(ha=3Dk[m])){=
var C;if(Ga>31&&Ga<127)C=3Dm;else{var p=3Dm;if(p in n)C=3Dn[p];else if(p =
in k)C=3Dn[p]=3Dk[p];else{var =
v=3Dp,w=3Dp.charCodeAt(0);if(w>31&&w<127)v=3Dp;else{if(w<256){if(v=3D"\\x=
",w<16||w>256)v+=3D"0"}else v=3D"\\u",w<4096&&(v+=3D"0");=0A=
v+=3Dw.toString(16).toUpperCase()}C=3Dn[p]=3Dv}}ha=3DC}nb[ob]=3Dha}r.push=
('"');o=3Dr.join("")}y.location.replace("javascript:"+o)}e=3D!0}catch(ub)=
{y=3DJa().google_jobrunner,Na(y)&&y.rl()}e&&(new =
W(a)).set(b,Za(a,b,c,!1))}},$a=3Dfunction(){return va&&wa/va||typeof =
window.google_hash_ratio=3D=3D"number"&&window.google_hash_ratio||g};wind=
ow.google_loader_used=3D!0;(function(a){if(!("google_onload_fired"in =
a))a.google_onload_fired=3D!1,Ea(a,function(){a.google_onload_fired=3D!0}=
)})(window);if(!window.google_loader_experiment)window.google_loader_expe=
riment=3DFa(["launch","blockodd"],xa)||Fa(["async2_black","async2_white"]=
,ya)||"launch";var =
ab,bb;a:{try{if(window.google_enable_async!=3D=3D!0&&window.google_loader=
_experiment=3D=3D"blockodd"&&window.top.location.hostname.length%2=3D=3D1=
){bb=3D!1;break a}}catch(cb){}bb=3D!0}=0A=
if(ab=3Dbb)ab=3Dwindow.google_enable_async=3D=3D=3D!1?!1:(window.google_l=
oader_experiment=3D=3D"async2_black"&&!/MSIE =
[67]/.test(navigator.userAgent)||B&&/MSIE =
8/.test(navigator.userAgent)||pa||oa&&!!window.document.body)&&!window.go=
ogle_container_id&&(!window.google_ad_output||window.google_ad_output=3D=3D=
"html");=0A=
if(ab){var =
db=3Dwindow;db.google_unique_id?++db.google_unique_id:db.google_unique_id=
=3D1;for(var =
Y=3Dwindow,_script$$inline_185=3D"script",Z,U=3DY,T=3D{allowtransparency:=
'"true"',frameborder:'"0"',height:'"'+Y.google_ad_height+'"',hspace:'"0"'=
,marginwidth:'"0"',marginheight:'"0"',onload:'"'+Xa+'"',scrolling:'"no"',=
vspace:'"0"',width:'"'+Y.google_ad_width+'"'},eb=3DU.document,$=3DT.id,fb=
=3D0;!$||U.document.getElementById($);)$=3D"aswift_"+fb++;T.id=3D$;T.name=
=3D$;eb.write(Ra());Z=3D$;var gb;Y.google_page_url&&(Y.google_page_url=3D=0A=
String(Y.google_page_url));for(var =
hb=3D[],ib=3D0,jb=3DV.length;ib<jb;ib++){var =
kb=3DV[ib];if(Y[kb]!=3Dg){var lb;try{var mb=3D[];Ua(new =
Sa,Y[kb],mb);lb=3Dmb.join("")}catch(pb){}lb&&Da(hb,kb,"=3D",lb,";")}}gb=3D=
hb.join("");for(var qb=3D0,rb=3DV.length;qb<rb;qb++)Y[V[qb]]=3Dg;var =
sb=3D(new =
Date).getTime(),tb=3D$a(),vb=3Dwindow.google_loader_experiment,wb=3D["<!d=
octype =
html><html><body><",_script$$inline_185,">",gb,"google_show_ads_impl=3Dtr=
ue;google_unique_id=3D",Y.google_unique_id,';google_async_iframe_id=3D"',=
Z,'";google_start_time=3D',=0A=
h,";",tb?"google_hash_ratio=3D"+tb+";":"",vb?'google_loader_experiment=3D=
"'+vb+'";':"","google_bpp=3D",sb>h?sb-h:1,";</",_script$$inline_185,">",Y=
a(),"</body></html>"].join("");(Y.document.getElementById(Z)?Pa:Qa)(Za(Y,=
Z,wb,!0))}else =
window.google_start_time=3Dh,window.google_hash_ratio=3D$a(),document.wri=
te(Ya());})();=0A=

------=_NextPart_000_001B_01CC11B2.B09A60E0--
